<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>踩坑笔记</title>
      <link href="/2019/03/29/tips/"/>
      <url>/2019/03/29/tips/</url>
      
        <content type="html"><![CDATA[<p><strong>记录开发中碰到的一些问题，以防日后继续踩坑</strong></p><h2 id="2019-04"><a href="#2019-04" class="headerlink" title="2019.04"></a>2019.04</h2><h3 id="po的完整版"><a href="#po的完整版" class="headerlink" title="po的完整版"></a>po的完整版</h3><pre class=" language-objc"><code class="language-objc">expr   变量|表达式              //显示变量或者表达式的值。expr -f h --  变量|表达式       //以16进制格式显示变量或表达式的内容expr -f b --  变量|表达式       //以二进制格式显示变量或者表达式的内容。expr -o --  oc对象             //等价于po  oc对象expr -P  3 -- oc对象           //上面命令的加强版本，他还会显示出对象内数据成员的结构，具体的P后面的数字就是你要想显示的层次。expr my_struct->a = my_array[3]    //给my_struct的a成员赋值。expr (char*)_cmd               //显示某个oc方法的方法名。expr (IMP)[self methodForSelector:_cmd]    //执行某个方法调用.</code></pre><p>真机使用的架构是<a href="https://blog.csdn.net/zqixiao_09/article/details/50726544" target="_blank" rel="noopener">arm64指令集</a>，模拟器使用的是x64指令集。可进入汇编调试模式调试。</p><h2 id="2019-3"><a href="#2019-3" class="headerlink" title="2019.3"></a>2019.3</h2><h3 id="微信小程序camera组件录像30s偶发超时问题"><a href="#微信小程序camera组件录像30s偶发超时问题" class="headerlink" title="微信小程序camera组件录像30s偶发超时问题"></a>微信小程序camera组件录像30s偶发超时问题</h3><p>在初始化<code>camera</code>上下文时，若要多次进行录像操作，必须制定<code>id</code>（文档中没有相关说明）。</p><p>不指定<code>id</code>,在进行多次录制时，会初始化多个上下文，<code>stop</code>操作会造成上一次的录制未停止，导致录制超时。</p><pre class=" language-objc"><code class="language-objc">wx.createCameraContext('myCamera')</code></pre><h3 id="保证当前是主线程的正确姿势"><a href="#保证当前是主线程的正确姿势" class="headerlink" title="保证当前是主线程的正确姿势"></a>保证当前是主线程的正确姿势</h3><p>之前在开发中刷新UI时回到主线程一般都是使用：</p><pre class=" language-objc"><code class="language-objc">if ([NSThread isMainThread]) {block();} else {dispatch_async(dispatch_get_main_queue(), block);}</code></pre><p>但是在一些场合需要判断的是<strong>如果在主线程执行非主队列调度的API，而这个API需要检查是否是在主队列上调度，那么将会出现问题。</strong>也就是说需要判断的是<strong>主队列</strong>而不是<strong>主线程</strong>。</p><p>更安全的方法：</p><pre class=" language-objc"><code class="language-objc">dispatch_main_async_safe(block) {if (strcmp(dispatch_queue_get_label(DISPATCH_CURRENT_QUEUE_LABEL), dispatch_queue_get_label(dispatch_get_main_queue())) == 0) {block();} else {dispatch_async(dispatch_get_main_queue(), block);\}}</code></pre><p>解析：</p><p><code>dispatch_queue_get_label(DISPATCH_CURRENT_QUEUE_LABEL)</code>：每个<code>queue</code>都有一个唯一的<code>label</code>，这是获取当前队列的<code>label</code>。</p><p><code>dispatch_queue_get_label(dispatch_get_main_queue()</code>：获取主队列的<code>label</code>。</p><p><code>strcmp（A, B）== 0</code>: 判断当前队列是否是主队列。</p><p><strong>这个方法将判断是否在主线程执行改为了是否在主队列执行，因为主队列无论是同步还是异步，都不会开辟新的线程，即都是在主线程执行。=&gt; 主队列调度的任务一定在主线程执行，而主线程执行的任务则不一定是在主队列调度</strong></p><h3 id="NSMapTable-的使用"><a href="#NSMapTable-的使用" class="headerlink" title="NSMapTable 的使用"></a>NSMapTable 的使用</h3><p>在翻看<code>SDWebImage</code>源码时，无意中发现原本的<code>imageCache</code>从<code>NSCache</code>为了<code>NSMapTable</code>。正好复习一下<code>NSMapTable</code>。</p><p><code>NSMapTable</code>一般都是和<code>NSDictionary</code>一起讲解的。<code>NSDictionary</code>一般适用于<code>key</code> =&gt; <code>object</code>，且<code>key</code>和<code>object</code>都只能是<code>OC</code>对象，由于<code>NSDictionary</code>是通过<code>key</code>来索引<code>object</code>的，<code>key</code>一旦被修改就无法找到<code>object</code>了，所以<code>NSDictionary</code>始终会复制<code>key</code>到自己的私有空间（<code>key</code>必须支持 <code>NSCopying</code> 协议）。因此一般使用简单高效的对象来作为key（例如<code>NSString</code>、<code>NSNumber</code>），以至于复制的时候不会对 CPU 和内存造成负担。</p><p>如果要做对象到对象的映射，我们可以使用<strong><code>NSMapTable</code></strong>：</p><pre class=" language-objc"><code class="language-objc">- (instancetype)initWithKeyPointerFunctions:(NSPointerFunctions *)keyFunctions valuePointerFunctions:(NSPointerFunctions *)valueFunctions capacity:(NSUInteger)initialCapacity;</code></pre><ul><li><p><code>NSMapTableStrongMemory</code>: 强引用</p></li><li><p><code>NSMapTableWeakMemory</code>: 弱引用</p></li><li><p><code>NSMapTableObjectPointerPersonality</code> :将对象添加到集合中时是否调用对象上的 <code>isEqualTo：</code> 和 <code>hash</code> 方法</p></li><li><p><code>NSMapTableCopyIn</code>:  复制一份，可以设置<code>key</code>为该属性 =&gt; <code>NSDictionary</code></p></li></ul><p>​</p><h3 id="图片解压缩方案​"><a href="#图片解压缩方案​" class="headerlink" title="图片解压缩方案​"></a>图片解压缩方案​</h3><p>加载图片主要有以下三种方法：</p><pre class=" language-objc"><code class="language-objc">- (nullable UIImage *)imageNamed:(NSString *)name;//同时会加载图片到内存中- (nullable UIImage *)imageWithContentsOfFile:(NSString *)path;//不会缓存到内存中，适合较大的不常用的图片- (nullable UIImage *)imageWithData:(NSData *)data;//不缓存，适合于加载网络图片</code></pre><p><strong>iOS加载图片流程：</strong></p><p>当使用<code>imageWithContentsOfFile</code>从地址中获取图片时，图片并没有解压缩，此时的图片是无法显示的，在渲染到屏幕之前，必须先要得到图片的原始像素数据（位图）。</p><p>将生成的image赋值给UIImageView，此时<code>CoreAnimation（CA）</code>的事务<code>（CATrasaction）</code>会捕获到<code>UIImageView</code>图层树的变化，在主线程的下一个<code>runloop</code>到来时，<code>CA</code>会提交这个事务:</p><ol><li>分配内存缓冲区用于管理文件<code>IO</code>和解压缩操作。</li><li>从磁盘中读取图片数据到内存中。</li><li>在<strong>主线程</strong>中将图片数据解码成未压缩的位图形式（<strong>耗时操作</strong>）</li><li>最后将位图渲染到<code>UIImageView</code>的图层上</li></ol><p>在以上操作中将图片解码成位图是一个在主线程中的耗时操作，因此很有必要将它放到子线程中提前解码成位图，再在主线程中渲染图片。<strong>而强制解压缩的原理就是对图片进行重新绘制，得到一张新的解压缩后的位图。</strong></p><p><strong>SDWebImage图片解压缩</strong></p><p>SDWebImage在从磁盘获取图片数据时，会根据图片是否包含Alpha通道以及是否图片存储时是否被缩小（iOS缓存操作60M的图片时，会缩小图片再进行缓存<code>SDImageCacheScaleDownLargeImages</code>）进行解压缩。</p><pre class=" language-objc"><code class="language-objc">- (nullable UIImage *)sd_decompressedImageWithImage:(nullable UIImage *)image {    if (![[self class] shouldDecodeImage:image]) {        return image;    }    // autorelease the bitmap context and all vars to help system to free memory when there are memory warning.    // on iOS7, do not forget to call [[SDImageCache sharedImageCache] clearMemory];    @autoreleasepool{//自动释放池，释放变量        CGImageRef imageRef = image.CGImage;        // device color space        CGColorSpaceRef colorspaceRef = SDCGColorSpaceGetDeviceRGB();//色域        BOOL hasAlpha = SDCGImageRefContainsAlpha(imageRef);        // iOS display alpha info (BRGA8888/BGRX8888)        CGBitmapInfo bitmapInfo = kCGBitmapByteOrder32Host;//kCGBitmapByteOrder32Little iPhone是小端模式，数据以32位位单位        //位图布局信息 有Alpha通道时，将A通道乘以RGB，无Alpha通道时，跳过        bitmapInfo |= hasAlpha ? kCGImageAlphaPremultipliedFirst : kCGImageAlphaNoneSkipFirst;        size_t width = CGImageGetWidth(imageRef);        size_t height = CGImageGetHeight(imageRef);        // kCGImageAlphaNone is not supported in CGBitmapContextCreate.        // Since the original image here has no alpha info, use kCGImageAlphaNoneSkipLast        // to create bitmap graphics contexts without alpha info.        CGContextRef context = CGBitmapContextCreate(NULL,//data系统会自动分配和是否内存                                                     width,//位图宽高，即像素数量                                                     height,                                                     kBitsPerComponent,//像素的每个颜色分量使用的 bit 数                                                     0,//位图的每一行使用的字节数=》大小至少为4 * width，指定0时系统不仅会为我们自动计算，而且还会进行 cache line alignment 的优化。优化过程不了解。。。这么用就好                                                     colorspaceRef,//色域 使用RGB                                                     bitmapInfo);//位图布局信息        if (context == NULL) {            return image;        }        // Draw the image into the context and retrieve the new bitmap image without alpha        CGContextDrawImage(context, CGRectMake(0, 0, width, height), imageRef);        CGImageRef imageRefWithoutAlpha = CGBitmapContextCreateImage(context);        UIImage *imageWithoutAlpha = [[UIImage alloc] initWithCGImage:imageRefWithoutAlpha scale:image.scale orientation:image.imageOrientation];        CGContextRelease(context);        CGImageRelease(imageRefWithoutAlpha);        return imageWithoutAlpha;    }}</code></pre><h2 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h2><h3 id="在数据库中递归子节点并建立表关联实现快速检索"><a href="#在数据库中递归子节点并建立表关联实现快速检索" class="headerlink" title="在数据库中递归子节点并建立表关联实现快速检索"></a>在数据库中递归子节点并建立表关联实现快速检索</h3><p>我们在开发过程中遇到大数据检索时，如果直接对多个表数据分别进行检索将很可能会导致很严重的性能问题，导致页面卡顿。</p><p>我们可以使用多张表关联的方式来优化该问题：在云办公组织组件中，由于组织树层次深、结构复杂，要计算每个初始节点包含的总人数，如果直接分别计算该节点的每个子节点的人数和，则需要执行多次的查询，势必会出现严重的性能问题。可以用表连接的方式来优化，SQLite 语句如下：</p><pre class=" language-objc"><code class="language-objc">membersCount = [db intForQuery:[NSString stringWithFormat:    @"SELECT count(*) from tbl_persons\    INNER JOIN (\    WITH RECURSIVE\    cte(depId, deptName, superDeptCode) AS(\    SELECT depId,deptName,superDeptCode FROM tbl_deptments WHERE depId=%zd\    UNION ALL\    SELECT a.depId, a.deptName, a.superDeptCode FROM tbl_deptments AS a INNER JOIN\    cte ON a.superDeptCode=cte.depId\    )\    SELECT * FROM cte\    ) AS a ON tbl_persons.deptCode = a.depId\    where lState=%zd and companyId=%zd",    deptId, state, [[CLOfficeUser shareInstance].companyId integerValue]]];</code></pre><p>其中:</p><pre class=" language-objc"><code class="language-objc">WITH RECURSIVE\cte(depId, deptName, superDeptCode) AS(\SELECT depId,deptName,superDeptCode FROM tbl_deptments WHERE depId=%zd\UNION ALL\SELECT a.depId, a.deptName, a.superDeptCode FROM tbl_deptments AS a INNER JOIN\cte ON a.superDeptCode=cte.depId\)\SELECT * FROM cte\</code></pre><p>表示对部门表<code>tbl_deptments</code>进行递归查询<code>superDeptCode</code>节点下的所有子节点<code>depId</code>。</p><p><code>INNER JOIN</code> 表示将关联两张表进行查询。</p><h3 id="使用宏判断输入的路径参数是否合法，并且给出代码提示"><a href="#使用宏判断输入的路径参数是否合法，并且给出代码提示" class="headerlink" title="使用宏判断输入的路径参数是否合法，并且给出代码提示"></a>使用宏判断输入的路径参数是否合法，并且给出代码提示</h3><p>在使用 KVO 时，通常要指定一个观察路径<code>keyPath</code>,如果该路径字符串拼错或是不存在，编译时并不会报错，只有等到运行时才会发现问题。Facebook开源的<code>FBKVOController</code>通过宏定义来解决了这个问题：</p><pre class=" language-objc"><code class="language-objc">#define keypath(self, path)   \(((void)(NO && ((void)self.path, NO)), strchr(# PATH, '.') + 1))</code></pre><p>其中<code>(((void)(NO &amp;&amp; ((void)self.path, NO)), strchr(# PATH, &#39;.&#39;) + 1))</code>是一个逗号表达式，只会计算逗号后面的部分<code>strchr(# PATH, &#39;.&#39;) + 1</code>，由于前面部分没有使用，编译器会报警告，因此加上<code>(void)</code>强制转换类型。</p><p><code>(NO &amp;&amp; ((void)self.path, NO))</code>NO与运算，直接跳过忽略第一个值，去计算表达式后面的值，且这里使用<code>(void)self.path</code>对<code>path</code>进行点运算，只要作为表达式的一部分，Xcode会自动提示。</p><p>如果传入的<code>path</code>不是<code>self</code>的属性，那么<code>self.path</code>就不是一个合法的表达式，所以自然编译就不会通过了。</p><p>使用：</p><pre class=" language-objc"><code class="language-objc">@keypath(self.personA);//返回@"personA"</code></pre><p><code>keypath(self, path)</code>返回的是C字符串，前面加@可转为OC对象<code>NSString</code>。</p><h3 id="NS-ENUM-与-NS-OPTIONS"><a href="#NS-ENUM-与-NS-OPTIONS" class="headerlink" title="NS_ENUM 与 NS_OPTIONS"></a>NS_ENUM 与 NS_OPTIONS</h3><p>使用 <code>NS_ENUM</code> 与 <code>NS_OPTIONS</code> 宏来定义枚举类型可以指明底层的数据类型。</p><p>使用:</p><pre class=" language-objc"><code class="language-objc">typedef NS_OPTIONS(NSUInteger, UISwipeGestureRecognizerDirection) {    UISwipeGestureRecognizerDirectionNone = 0,  // 值为0    UISwipeGestureRecognizerDirectionRight = 1 << 0,  // 值为2的0次方 即左移一位    UISwipeGestureRecognizerDirectionLeft = 1 << 1,  // 值为2的1次方    UISwipeGestureRecognizerDirectionUp = 1 << 2,  // 值为2的2次方    UISwipeGestureRecognizerDirectionDown = 1 << 3  // 值为2的3次方};typedef NS_ENUM(NSInteger, NSWritingDirection) {    NSWritingDirectionNatural = 0,  // 值为0        NSWritingDirectionLeftToRight,  // 值为1    NSWritingDirectionRightToLeft  // 值为2       };</code></pre><p>区别:</p><ul><li><p><code>NS_ENUM</code> 枚举项的值为 <code>NSInteger</code>，<code>NS_OPTIONS</code> 枚举项的值为 <code>NSUInteger</code></p></li><li><p><code>NS_ENUM</code> 定义通用枚举（默认自增步长为 1），<code>NS_OPTIONS</code> 定义位移枚举(可以同时存在多个)</p></li><li><p><code>NS_OPTIONS</code>的枚举项的值一般使用位运算符定义：<code>1 &lt;&lt; 0，1 &lt;&lt; 1</code>，而 <code>NS_ENUM</code> 的值一般直接使用数值：0 1 2</p></li></ul><p>在使用或运算操作两个枚举值时，C++ 默认为运算结果的数据类型是枚举的底层数据类型<code>(NSUInteger)</code>,且 C++ 不允许它隐式转换为枚举类型本身，所以 C++ 模式下定义了 <code>NS_OPTIONS</code> 宏以保证不会出现类型转换。因此如果OC不按 C++ 模式编译，两者展开方式相同。如果按照 C++ 模式编译, 则存在区别。</p><p>结论：只要枚举值需要按位或（2个及以上枚举值可多个存在）就使用 <code>NS_OPTIONS</code>，否则使用 <code>NS_ENUM</code>。</p><h3 id="UIControl拖拽移出控件问题"><a href="#UIControl拖拽移出控件问题" class="headerlink" title="UIControl拖拽移出控件问题"></a>UIControl拖拽移出控件问题</h3><p>我们要自定义控件的互动效果时需要使用 <code>UIControl</code>，但是在使用时发现，离开控件时并不会触发 <code>UIControlEventTouchDragExit</code> 和 <code>UIControlEventTouchDragOutside</code>，实践后发现，离开控件边缘100px时，才会触发该事件。</p><p><img src="/2019/03/29/tips/image-UIControl.png" alt="image-20190402150100261"></p><p>我们可以使用以下代码来取消这个效果。</p><pre class=" language-objc"><code class="language-objc">- (BOOL)continueTrackingWithTouch:(UITouch *)touch withEvent:(UIEvent *)event {    // 设置新的边界    CGFloat boundsExtension = 0.0f;    CGRect outerBounds = CGRectInset(self.bounds, -1 * boundsExtension, -1 * boundsExtension);    // 判断触摸位置    BOOL touchOutside = !CGRectContainsPoint(outerBounds, [touch locationInView:self]);    if(touchOutside)    {        // 判断是UIControlEventTouchDragExit/UIControlEventTouchDragOutside        BOOL previousTouchInside = CGRectContainsPoint(outerBounds, [touch previousLocationInView:self]);        if(previousTouchInside)        {            [self sendActionsForControlEvents:UIControlEventTouchDragExit];        }        else        {            [self sendActionsForControlEvents:UIControlEventTouchDragOutside];        }    } else {        [self sendActionsForControlEvents:UIControlEventTouchDown];    }    // 如果不是想要修改的control event，返回原操作    return [super continueTrackingWithTouch:touch withEvent:event];}</code></pre><h3 id="判断两张UIImage全等"><a href="#判断两张UIImage全等" class="headerlink" title="判断两张UIImage全等"></a>判断两张UIImage全等</h3><p>判断两张图片全像素相等，网络上提供的方法大多如下：</p><pre class=" language-objc"><code class="language-objc">BOOL isImageEqual(UIImage *image1, UIImage *image2) {     if (image1 && image2) {         NSData *data1 = UIImagePNGRepresentation(image1);         NSData *data2 = UIImagePNGRepresentation(image2);         BOOL result = [data1 isEqual:data2];         return result;     }     return NO; }</code></pre><p>该方法主要实现思路：采用 <code>UIImagePNGRepresentation</code> 将 <code>UIImage</code> 转化 <code>NSData</code> 之后进行比较。因为：<code>UIImage</code> 显示的图片为 BMP 类型图片。它采用位映射存储格式，除了图像深度可选以外，不采用其他任何压缩，因此，BMP 图像所占用的空间很大。而 <code>UIImagePNGRepresentation</code> 会将 BMP 转化为 PNG ,其过程是是无损数据压缩的，但经过压缩转化后可能存在相同图片压缩结果不同的情况。</p><p>所以以上的判断方法存在三个问题：</p><ul><li>没有判断两张图片来源是否相同，从资源文件中读出的同一张图片组成不同的 <code>UIImage</code> 对象，其指针是相同的，<code>UIImage</code> 只是引用，可能产生图片和自身比较的过程。</li><li>把 <code>UIImage</code> 转成 <code>NSData</code> 的过程非常耗时。</li><li>同一张图片的压缩结果可能存在不同。</li></ul><p>由于 <code>UIImage</code> 使用的图片已经是 BMP 类型的图片，所以只要获取到图片每个像素对应的存储数据进行对比，即可不经过压缩、对比结果绝对精确等。<br>具体代码如下：</p><pre class=" language-objc"><code class="language-objc">BOOL isImageEqual(UIImage *image1, UIImage *image2) {    if (image1 == image2) {        return YES;    }    if (!CGSizeEqualToSize(image1.size, image2.size)) {        return NO;    }    if (image1 && image2) {        CGImageRef imageRef1 = [image1 CGImage];        //获取图片像素映射信息        CFDataRef data1 = CGDataProviderCopyData(CGImageGetDataProvider(imageRef1));        const unsigned char * buffer1 =  CFDataGetBytePtr(data1);        CFIndex length1 = CFDataGetLength(data1);        CGImageRef imageRef2 = [image2 CGImage];        CFDataRef data2 = CGDataProviderCopyData(CGImageGetDataProvider(imageRef2));        const unsigned char * buffer2 =  CFDataGetBytePtr(data2);        CFIndex length2 = CFDataGetLength(data2);        if (length1 != length2) {            return NO;        }        BOOL result = YES;        for (long i = 0; i<length1; i++) {            if(*(buffer1+i) != *(buffer2+i)){                result = NO;                break;            }        }        //autoRelease...CG CF object        return result;    }    return NO; }</code></pre><p>经过测试，最差情况下，性能是原方案的4-10倍。</p>]]></content>
      
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
            <tag> 开发技巧 </tag>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>slam 约球微信小程序开发文档</title>
      <link href="/2019/02/21/slam/"/>
      <url>/2019/02/21/slam/</url>
      
        <content type="html"><![CDATA[<h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><p>slam约球是一款为篮球爱好者提供的篮球约战平台，用户可以创建球员档案、篮球场以及管理联盟，让周围的球友更加了解你，方便篮球爱好者相互交流。</p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="球员档案模块"><a href="#球员档案模块" class="headerlink" title="球员档案模块"></a>球员档案模块</h3><p>球员档案模块主要用于展示球员的个体信息、以及球员属性、投篮热图等信息。用户在完善球员信息后，会在地图上显示球员的常驻位置，这样附近球友便可方便的发现周边潜在的球友，并通过球友档案快速的对其进行初步了解。</p><h3 id="约球模块"><a href="#约球模块" class="headerlink" title="约球模块"></a>约球模块</h3><p>用户可在小程序中将身边的真实篮球场添加到应用中，添加后球场会显示在地图上，用户点击地图上的球场图标可进入查看球场详情。在球场详情中可以进入发起约球，当发起约球后，便会将附近球友添加到约球中，等待附近球友确认是否加入。同时用户还可以在聊天室中讨论具体的约球事项。</p><h3 id="联盟模块"><a href="#联盟模块" class="headerlink" title="联盟模块"></a>联盟模块</h3><p>用户可以将自己的篮球赛创建为一个联盟，比如校园篮球赛，让所有参赛队员都加入slam约球（只需在微信小程序中完善球员信息），各个球队领队或队长创建球队，并将队员添加到球队中，比赛组织方创建对应的联盟，再将所有的参赛队加入到联盟中即可。随着赛程的进行，组织方在赛程中编辑赛后数据，所有用户都可以在小程序中查看赛程积分、赛后球员数据等。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><h3 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h3><p><img src="/2019/02/21/slam/UseCaseDiagram.png" alt="UseCaseDiagram"></p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><h4 id="球员档案"><a href="#球员档案" class="headerlink" title="球员档案"></a>球员档案</h4><p><img src="/2019/02/21/slam/ClassDiagramPlayerInfo.png" alt="ClassDiagramPlayerInfo"></p><h4 id="约球模块-1"><a href="#约球模块-1" class="headerlink" title="约球模块"></a>约球模块</h4><p><img src="/2019/02/21/slam/ClassDiagramDateBall.png" alt="ClassDiagramDateBall"></p><h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><p><img src="/2019/02/21/slam/SequenceDiagramDateCombat.png" alt="SequenceDiagramDateCombat"></p><h2 id="最后献上slam约球小程序截图"><a href="#最后献上slam约球小程序截图" class="headerlink" title="最后献上slam约球小程序截图"></a>最后献上slam约球小程序截图</h2><p><img src="/2019/02/21/slam/IMG_5286.PNG" alt="IMG_5286"><img src="/2019/02/21/slam/IMG_5288.PNG" alt="IMG_5288"><img src="/2019/02/21/slam/IMG_5287.PNG" alt="IMG_5287"><img src="/2019/02/21/slam/IMG_5291.JPG" alt="IMG_5282"><img src="/2019/02/21/slam/IMG_5283.PNG" alt="IMG_5283"><img src="/2019/02/21/slam/IMG_5284.PNG" alt="IMG_5284"><img src="/2019/02/21/slam/IMG_5292.jpg" alt="IMG_5285"></p>]]></content>
      
      
      <categories>
          
          <category> 设计文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> project </tag>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSPatch学习实践</title>
      <link href="/2018/10/21/jspatch/"/>
      <url>/2018/10/21/jspatch/</url>
      
        <content type="html"><![CDATA[<h2 id="JSPatch介绍"><a href="#JSPatch介绍" class="headerlink" title="JSPatch介绍"></a>JSPatch介绍</h2><p>JSPatch是一个开源的项目<a href="https://github.com/bang590/JSPatch" target="_blank" rel="noopener">Github</a>，只需要在项目里引入极小的引擎文件，就可以使用 JavaScript 调用任何 Objective-C 的原生接口，替换任意 Objective-C 原生方法。目前主要用于下发 JS 脚本替换原生 Objective-C 代码，实时修复线上 bug。</p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><ul><li><p>类名 方法名 映射 相应的类和方法</p><pre class=" language-objective-c"><code class="language-objective-c">//    生成类Class destinationClass = NSClassFromString(@"SecondViewController");id viewController = [[destinationClass alloc] init];//    生成方法SEL selector = NSSelectorFromString(@"changeBackgroundColor");[viewController performSelector:selector];[self.navigationController pushViewController:viewController animated:YES];</code></pre></li><li><p>为注册的新类添加方法</p><pre class=" language-objective-c"><code class="language-objective-c">Class superCls = NSClassFromString(@"ViewController");Class cls = objc_allocateClassPair(superCls, "childViewController", 0);objc_registerClassPair(cls);SEL selector = NSSelectorFromString(@"setBlueBackground");class_addMethod(cls, selector, setBlueBackground, "v@:");id newVC = [[cls alloc] init];[self.navigationController pushViewController:newVC animated:YES];[newVC performSelector:@selector(setBlueBackground)];</code></pre></li><li><p>替换某个类的方法为新的实现</p><pre class=" language-objective-c"><code class="language-objective-c">Class sourceClass = NSClassFromString(@"ViewController");id sourceControler = [[sourceClass alloc] init];SEL changeTitle = NSSelectorFromString(@"changeTitle");   class_replaceMethod(sourceClass, changeTitle, donotChangeTitle, "");    [sourceControler performSelector:changeTitle];</code></pre><p>实现原理：JS传递字符串给OC，OC通过 Runtime 接口调用和替换OC方法。</p></li></ul><h3 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h3><p>引入JSPatch后，可以通过以下代码创建一个UIView对象，并且设置背景颜色和透明度。涵盖了 require 引入类，JS 调用接口，消息传递，对象持有和转换，参数转换这五个方面。</p><pre class=" language-js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'UIView'</span><span class="token punctuation">)</span><span class="token keyword">var</span> view <span class="token operator">=</span> UIView<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>view<span class="token punctuation">.</span><span class="token function">setBackgroundColor</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'UIColor'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">grayColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>view<span class="token punctuation">.</span><span class="token function">setAlpha</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span></code></pre><h4 id="require"><a href="#require" class="headerlink" title="require"></a>require</h4><p>调用 <code>require(&#39;UIView&#39;)</code> 后，就可以直接使用 <code>UIView</code> 这个变量去调用相应的类方法了，require 做的事很简单，就是在JS全局作用域上创建一个同名变量，变量指向一个对象，对象属性 <code>__clsName</code> 保存类名，同时表明这个对象是一个 OC Class。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> _require <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>clsName<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>global<span class="token punctuation">[</span>clsName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    global<span class="token punctuation">[</span>clsName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>      __clsName<span class="token punctuation">:</span> clsName    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> global<span class="token punctuation">[</span>clsName<span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h4 id="JS调用接口"><a href="#JS调用接口" class="headerlink" title="JS调用接口"></a>JS调用接口</h4><p>a.<code>require(&#39;UIView&#39;)</code> 这句话在 JS 全局作用域生成了 <code>UIView</code> 这个对象，它有个属性叫 <code>__isCls</code>，表示这代表一个 OC 类。调用 <code>UIView</code> 这个对象的 <code>alloc()</code> 方法，会去到 <code>__c()</code>函数，在这个函数里判断到调用者 <code>__isCls</code> 属性，知道它是代表 OC 类，把方法名和类名传递给 OC 完成调用。实现类似OC/Lua/Ruby等的消息转发机制：</p><pre class=" language-javascript"><code class="language-javascript">UIView<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>UIView<span class="token punctuation">.</span><span class="token function">__c</span><span class="token punctuation">(</span><span class="token string">'alloc'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">__c</span><span class="token punctuation">(</span><span class="token string">'init'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript">Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__c <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>__obj <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>__clsName<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>methodName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> args <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">_methodFunc</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__obj<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__clsName<span class="token punctuation">,</span> methodName<span class="token punctuation">,</span> args<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__isSuper<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>_methodFunc()</code> 就是把相关信息传给OC，OC用 Runtime 接口调用相应方法，返回结果值，这个调用就结束了。</p><p>b.对于一个自定义id对象，JavaScriptCore 会把这个自定义对象的指针传给 JS，这个对象在 JS 无法使用，但在回传给 OC 时 OC 可以找到这个对象。对于这个对象生命周期的管理，如果JS有变量引用时，这个 OC 对象引用计数就加1 ，JS 变量的引用释放了就减1，如果 OC 上没别的持有者，这个OC对象的生命周期就跟着 JS 走了，会在 JS 进行垃圾回收时释放。</p><h4 id="消息传递"><a href="#消息传递" class="headerlink" title="消息传递"></a>消息传递</h4><p>消息传递使用了JavaScriptCore 的接口，OC端在启动JSPatch引擎时会创建一个 JSContext 实例，JSContext 是JS代码的执行环境，可以给 JSContext 添加方法，JS就可以直接调用这个方法。JS通过调用 JSContext 定义的方法把数据传给OC，OC通过返回值传会给JS：</p><pre class=" language-javascript"><code class="language-javascript">JSContext <span class="token operator">*</span>context <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>JSContext alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>context<span class="token punctuation">[</span>@<span class="token string">"hello"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">^</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">NSLog</span><span class="token punctuation">(</span>@<span class="token string">"hello %@"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">[</span>_context evaluateScript<span class="token punctuation">:</span>@<span class="token string">"hello('word')"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   </code></pre><h4 id="方法替换"><a href="#方法替换" class="headerlink" title="方法替换"></a>方法替换</h4><p>让<code>ORIGViewDidLoad</code>指向<code>viewDidLoad</code>,<code>viewDidLoad</code>指向新的实现<code>viewDidLoadIMP</code>。</p><pre class=" language-objective-c"><code class="language-objective-c">static void viewDidLoadIMP (id slf, SEL sel) {   JSValue *jsFunction = …;   [jsFunction callWithArguments:nil];}Class cls = NSClassFromString(@"UIViewController");SEL selector = @selector(viewDidLoad);Method method = class_getInstanceMethod(cls, selector);//获得viewDidLoad方法的函数指针IMP imp = method_getImplementation(method)//获得viewDidLoad方法的参数类型char *typeDescription = (char *)method_getTypeEncoding(method);//新增一个ORIGViewDidLoad方法，指向原来的viewDidLoad实现class_addMethod(cls, @selector(ORIGViewDidLoad), imp, typeDescription);//把viewDidLoad IMP指向自定义新的实现class_replaceMethod(cls, selector, viewDidLoadIMP, typeDescription);</code></pre><p>替换 UIViewController 的 -viewWillAppear: 方法为例：</p><ol><li><p>把UIViewController的 <code>-viewWillAppear:</code> 方法通过 <code>class_replaceMethod()</code> 接口指向 <code>_objc_msgForward</code>，这是一个全局 IMP，OC 调用方法不存在时都会转发到这个 IMP 上，这里直接把方法替换成这个 IMP，这样调用这个方法时就会走到 <code>-forwardInvocation:</code>。</p></li><li><p>为UIViewController添加 <code>-ORIGviewWillAppear:</code> 和 <code>-_JPviewWillAppear:</code> 两个方法，前者指向原来的IMP实现，后者是新的实现，稍后会在这个实现里回调JS函数。</p></li><li><p>改写UIViewController的 <code>-forwardInvocation:</code> 方法为自定义实现。一旦OC里调用 UIViewController 的 <code>-viewWillAppear:</code> 方法，经过上面的处理会把这个调用转发到 <code>-forwardInvocation:</code> ，这时已经组装好了一个 NSInvocation，包含了这个调用的参数。在这里把参数从 NSInvocation 反解出来，带着参数调用上述新增加的方法 <code>-_JPviewWillAppear:</code>，在这个新方法里取到参数传给JS，调用JS的实现函数。整个调用过程就结束了，整个过程图示如下：</p><p><img src="https://camo.githubusercontent.com/48cbbd8ee1c8af0ef8f18a2e0ab0d50a085afab1/687474703a2f2f626c6f672e636e62616e672e6e65742f77702d636f6e74656e742f75706c6f6164732f323031352f30362f4a535061746368322e706e67" alt="JSPatch方法替换"></p><p>​</p></li></ol><h2 id="JSPatch使用"><a href="#JSPatch使用" class="headerlink" title="JSPatch使用"></a>JSPatch使用</h2><h3 id="OC与JSPatch代码转换"><a href="#OC与JSPatch代码转换" class="headerlink" title="OC与JSPatch代码转换"></a>OC与JSPatch代码转换</h3><pre class=" language-objective-c"><code class="language-objective-c">//OC@interface CompareJSPatchController : UITableViewController@end@interface CompareJSPatchController()<UIAlertViewDelegate>@end@implementation CompareJSPatchController- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {    return 1;}- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {    return [self dataSource].count;}- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"cell"];    if (!cell) {        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleValue1 reuseIdentifier:@"cell"];    }    cell.textLabel.text = [self dataSource][indexPath.row];    return cell;}- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {    return 60;}- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {    UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Alert" message:[self dataSource][indexPath.row] delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];    [alertView show];}- (void)alertView:(UIAlertView *)alertView willDismissWithButtonIndex:(NSInteger)buttonIndex {    NSLog(@"click btn %@",[alertView buttonTitleAtIndex:buttonIndex]);}- (NSArray *)dataSource {    if (_data == nil) {        _data = [NSMutableArray array];        for (int i = 0; i < 20; i++) {            [_data addObject:[NSString stringWithFormat:@"cell from js %d",i]];        }    }    return _data;}@end</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//JSPatch</span><span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token string">'CompareJSPatchController : UITableViewController &lt;UIAlertViewDelegate>'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    dataSource<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> data <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"cell from js "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    self<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    numberOfSectionsInTableView<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>tableView<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    tableView_numberOfRowsInSection<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>tableView<span class="token punctuation">,</span> section<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    tableView_cellForRowAtIndexPath<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>tableView<span class="token punctuation">,</span> indexPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> cell <span class="token operator">=</span> tableView<span class="token punctuation">.</span><span class="token function">dequeueReusableCellWithIdentifier</span><span class="token punctuation">(</span><span class="token string">"cell"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cell<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cell <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'UITableViewCell'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initWithStyle_reuseIdentifier</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"cell"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    cell<span class="token punctuation">.</span><span class="token function">textLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>indexPath<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> cell    <span class="token punctuation">}</span><span class="token punctuation">,</span>    tableView_heightForRowAtIndexPath<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>tableView<span class="token punctuation">,</span> indexPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">60</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    tableView_didSelectRowAtIndexPath<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>tableView<span class="token punctuation">,</span> indexPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> alertView <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'UIAlertView'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initWithTitle_message_delegate_cancelButtonTitle_otherButtonTitles</span><span class="token punctuation">(</span><span class="token string">"Alert"</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span><span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>indexPath<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">,</span> <span class="token string">"OK"</span><span class="token punctuation">,</span>  <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    alertView<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    alertView_willDismissWithButtonIndex<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>alertView<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click btn '</span> <span class="token operator">+</span> alertView<span class="token punctuation">.</span><span class="token function">buttonTitleAtIndex</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="defineClass"><a href="#defineClass" class="headerlink" title="defineClass"></a>defineClass</h4><p><code>defineClass(classDeclaration, [properties] instanceMethods, classMethods)</code></p><p>@param <code>classDeclaration</code>: 字符串，<code>className:superClassName &lt;Protocol&gt;</code></p><p>@param <code>properties</code>: 新增property，字符串数组，可省略 </p><p>@param <code>instanceMethods</code>: 要添加或覆盖的实例方法 </p><p>@param <code>classMethods</code>: 要添加或覆盖的类方法</p><pre class=" language-js"><code class="language-js"><span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token string">"类名"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"成员变量"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//实例方法,不同方法之间使用逗号分隔</span>    viewDidLoad<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//do something</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//类方法,不同方法之间使用逗号分隔</span>    getClassName<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="ORIG使用原方法"><a href="#ORIG使用原方法" class="headerlink" title="ORIG使用原方法"></a>ORIG使用原方法</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token string">"类名"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"成员变量"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//覆盖原方法</span>    viewDidLoad<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//do something</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//使用原方法</span>    ORGIviewDidLoad<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//do something</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="导入头文件"><a href="#导入头文件" class="headerlink" title="导入头文件"></a>导入头文件</h4><p><code>require(&#39;UIColor,UIView,NSURL,NSURLRequest,UIFont,UILabel&#39;);</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'UIView'</span><span class="token punctuation">)</span><span class="token keyword">var</span> view <span class="token operator">=</span> UIView<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>view<span class="token punctuation">.</span><span class="token function">setBackgroundColor</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'UIColor'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">grayColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>view<span class="token punctuation">.</span><span class="token function">setAlpha</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span></code></pre><h4 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//JSPatch</span><span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token string">"JPViewController: UIViewController &lt;UIAlertViewDelegate>"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  viewDidAppear<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>animated<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> alertView <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'UIAlertView'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initWithTitle_message_delegate_cancelButtonTitle_otherButtonTitles</span><span class="token punctuation">(</span><span class="token string">"Alert"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span><span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">objectAtIndex</span><span class="token punctuation">(</span>indexPath<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">,</span> <span class="token string">"OK"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>     alertView<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  alertView_clickedButtonAtIndex<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>alertView<span class="token punctuation">,</span> buttonIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'clicked index '</span> <span class="token operator">+</span> buttonIndex<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="动态新增-Property"><a href="#动态新增-Property" class="headerlink" title="动态新增 Property"></a>动态新增 Property</h4><pre class=" language-js"><code class="language-js"><span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token string">"JPTableViewController"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'totalCount'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  init<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     self <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     self<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//添加新的 Property (id data)</span>     self<span class="token punctuation">.</span><span class="token function">setTotalCount</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> self  <span class="token punctuation">}</span><span class="token punctuation">,</span>  viewDidLoad<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">var</span> data <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//获取 Property 值</span>     <span class="token keyword">var</span> totalCount <span class="token operator">=</span> self<span class="token punctuation">.</span><span class="token function">totalCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><p><code>JSPatch</code>原生支持 <code>CGRect / CGPoint / CGSize / NSRange</code> 这四个 <code>struct</code> 类型，用 <code>JS</code> 对象表示:</p><pre class=" language-objective-c"><code class="language-objective-c">CGRectMake(20, 20, 100, 100)                      //OC{x:20, y:20, width:100, height:100}               //JSPatchCGPointMake(10,10)                                //OC{x: 10, y: 10}                                    //JSPatchCGSizeMake(100, 100)                              //OC{width: 100, height:100}                          //JSPatchNSMakeRange(0, 1)                                 //OC{location: 0, length: 1}                          //JSPatch</code></pre><ul><li><p>若要让 JS 脚本支持其他 struct 类型，需要先手动注册<a href="https://github.com/bang590/JSPatch/wiki/添加-struct-类型支持" target="_blank" rel="noopener">添加 struct 类型支持</a></p><pre><code>//支持 CGAffineTransformrequire(&#39;JPEngine&#39;).defineStruct({  &quot;name&quot;: &quot;CGAffineTransform&quot;,  &quot;types&quot;: &quot;FFFFFF&quot;,  &quot;keys&quot;: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;tx&quot;, &quot;ty&quot;]})</code></pre></li></ul><h4 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h4><p>在JS使用字符串代表 <code>Selector</code>（需要使用“ ”包裹字符串）:</p><pre class=" language-objective-c"><code class="language-objective-c">//Obj-C[self performSelector:@selector(viewWillAppear:) withObject:@(YES)];//JSself.performSelector_withObject("viewWillAppear:", 1)</code></pre><h4 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h4><p><code>console.log()</code></p><h4 id="nil"><a href="#nil" class="headerlink" title="nil"></a>nil</h4><p>JS 上的 <code>null</code> 和 <code>undefined</code> 都代表 OC 的 <code>nil</code>，如果要表示 <code>NSNull</code>, 用 <code>nsnull</code> 代替，如果要表示 <code>NULL</code>, 也用 <code>null</code> 代替</p><h4 id="NSArray-NSString-NSDictionary"><a href="#NSArray-NSString-NSDictionary" class="headerlink" title="NSArray / NSString / NSDictionary"></a>NSArray / NSString / NSDictionary</h4><p><code>NSArray / NSString / NSDictionary</code> 不会自动转成对应的 JS 类型，像普通 <code>NSObject</code> 一样使用它们</p><pre class=" language-objective-c"><code class="language-objective-c">//在OC中创建的数组和字典@implementation JPObject+ (NSArray *)data {  return @[[NSMutableString stringWithString:@"JS"]]}+ (NSMutableDictionary *)dict {    return [[NSMutableDictionary alloc] init];}@end</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//在JSPatch中获取与使用</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'JPObject'</span><span class="token punctuation">)</span><span class="token keyword">var</span> ocStr <span class="token operator">=</span> JPObject<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">objectAtIndex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>ocStr<span class="token punctuation">.</span><span class="token function">appendString</span><span class="token punctuation">(</span><span class="token string">"Patch"</span><span class="token punctuation">)</span><span class="token keyword">var</span> dict <span class="token operator">=</span> JPObject<span class="token punctuation">.</span><span class="token function">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>dict<span class="token punctuation">.</span><span class="token function">setObject_forKey</span><span class="token punctuation">(</span>ocStr<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dict<span class="token punctuation">.</span><span class="token function">objectForKey</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="weak-strong"><a href="#weak-strong" class="headerlink" title="weak / strong"></a>weak / strong</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> weakSelf <span class="token operator">=</span> <span class="token function">__weak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>self<span class="token punctuation">.</span><span class="token function">setCompleteBlock</span><span class="token punctuation">(</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">...</span>    <span class="token keyword">var</span> strongSelf <span class="token operator">=</span> <span class="token function">__strong</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h4><ul><li><p>block传值</p><p>将JS函数作为block传递给OC</p><p>需要使用<code>block(paramTypes, function)</code>接口包装</p><pre class=" language-objective-c"><code class="language-objective-c">+ (void)request:(void(^)(NSString *content, BOOL success))callback {    callback(@"I'm content", YES);}</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'JPEngine'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addExtensions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'JPBlock'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接入JPBlock扩展，使用完整的block</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ViewController'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token string">"void, NSString *, BOOL"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>ctn<span class="token punctuation">,</span> succ<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>succ<span class="token punctuation">)</span> <span class="token function">log</span><span class="token punctuation">(</span>ctn<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//output: I'm content</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>将OC中的block传递给JSPatch</p><pre class=" language-objective-c"><code class="language-objective-c">typedef void(^JPBlock)(NSDictionary *dict);+ (JPBlock)getBlock {    NSString *ctn = @"JSPatch";    JPBlock block = ^(NSDictionary *dict) {        NSLog(@"I'm %@, version: %@", ctn, dict[@"version"]);    };    return block;}</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> block <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ViewController'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">{</span>version<span class="token punctuation">:</span><span class="token string">'1.0.0'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>总结：JS 没有 block 类型的变量，OC 的 block 对象传到 JS 会变成 JS function，所有要从 JS 传 block 给 OC 都需要用 <code>block()</code> 接口包装。</p></li><li><p><a href="https://github.com/bang590/JSPatch/wiki/JPBlock-扩展使用文档" target="_blank" rel="noopener">JPBlock扩展</a></p></li></ul><h4 id="GCD"><a href="#GCD" class="headerlink" title="GCD"></a>GCD</h4><p>使用 <code>dispatch_after() dispatch_async_main()</code> <code>dispatch_sync_main() dispatch_async_global_queue()</code> 接口调用GCD方法:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">dispatch_after</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// do something</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">dispatch_async_main</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// do something</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">dispatch_sync_main</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// do something</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">dispatch_async_global_queue</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// do something</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="枚举、宏、全局变量"><a href="#枚举、宏、全局变量" class="headerlink" title="枚举、宏、全局变量"></a>枚举、宏、全局变量</h4><ul><li><p>OC中的枚举 要直接换成 具体值替换 <code>UIControlEventTouchUpInside</code> =&gt; <code>1&lt;&lt;6</code></p><pre class=" language-objective-c"><code class="language-objective-c">[btn addTarget:self action:@selector(handleBtn) forControlEvents:UIControlEventTouchUpInside];</code></pre><pre class=" language-js"><code class="language-js">btn<span class="token punctuation">.</span><span class="token function">addTarget_action_forControlEvents</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"handleBtn"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>宏</p><p>Objective-C 里的宏不能直接在 JS 上使用，可以使用全局变量替代</p></li><li><p>全局变量</p><p>在类里定义的 <code>static</code> 全局变量无法在 JS 上获取到，若要在 JS 拿到这个变量，需要在 OC 用get方法返回：</p><pre class=" language-objective-c"><code class="language-objective-c">static NSString *name;@implementation JPTestObject+ (NSString *)name {  return name;}@end</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> JPTestObject<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//拿到全局变量值</span></code></pre></li></ul><h3 id="JSPatch-代码转换器"><a href="#JSPatch-代码转换器" class="headerlink" title="JSPatch 代码转换器"></a><a href="https://jspatch.com/Tools/convertor" target="_blank" rel="noopener">JSPatch 代码转换器</a></h3><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><h5 id="在-iOS8-下，JSPatch-支持使用-Safari-自带的调试工具对-JS-脚本进行断点调试"><a href="#在-iOS8-下，JSPatch-支持使用-Safari-自带的调试工具对-JS-脚本进行断点调试" class="headerlink" title="在 iOS8 下，JSPatch 支持使用 Safari 自带的调试工具对 JS 脚本进行断点调试"></a>在 iOS8 下，JSPatch 支持使用 Safari 自带的调试工具对 JS 脚本进行断点调试</h5><ul><li>开启 Safari 调试菜单：Safari -&gt; 偏好设置 -&gt; 高级 -&gt; 勾选[在菜单栏中显示“开发”菜单]</li><li>启动APP -&gt; Safari -&gt; 开发 -&gt; 选择你的机器 -&gt; JSContext</li><li>连接真机调试时，需要打开真机的web检查器：设置 -&gt; Safari -&gt; 高级 -&gt; Web检查器</li></ul><p><img src="/2018/10/21/jspatch/JSContext.png" alt="JSContext"></p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p><a href>JSPatchDemo</a></p>]]></content>
      
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSPatch </tag>
            
            <tag> 热修复 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FBKVOController源码分析</title>
      <link href="/2018/08/22/ios-fbkvocontroller/"/>
      <url>/2018/08/22/ios-fbkvocontroller/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>FBKVOController 是 Facebook 开源的接口设计优雅的 KVO 框架。研读源码有助于加深对其框架和模式的理解，将其中的一些代码技巧运用到开发工作中，以提升自身开发水平。</p><a id="more"></a> <h1 id="一、FBKVOController-简介"><a href="#一、FBKVOController-简介" class="headerlink" title="一、FBKVOController 简介"></a>一、FBKVOController 简介</h1><p>KVO (key-Value Observing) 是通过观察者监听指定<code>keyPath</code>路径下属性改变而触发响应的开发方案。开发者可以在工程中直接使用 Apple 原生的 KVO，支持多个观察者同时观察同一个<code>keyPath</code>属性。然而，Apple 原生 KVO 的使用较为麻烦，需要添加观察者，移除观察者，通知回调，且其回调方法与添加观察者方法过于分散。同时，移除未添加的观察者还会导致程序奔溃，重复添加观察者将造成回调函数执行多次。</p><p>FBKVOController 是 FaceBook 开源的简化封装后的 KVO 框架。它对原生 KVO 监听函数进行了封装，使用<code>block</code>或<code>@selector(SEL)</code>的回调操作，极大的简化了 KVO 调用方式，避免了在程序中处理通知回调函数逻辑散落的到处都是。同时将移除观察者方法巧妙的放到<code>dealloc</code>方法中，实现“自释放”。</p><pre class=" language-objc"><code class="language-objc">- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context;</code></pre><h3 id="FBKVOController-使用"><a href="#FBKVOController-使用" class="headerlink" title="FBKVOController 使用"></a>FBKVOController 使用</h3><pre class=" language-objc"><code class="language-objc">/** 初始化KVOController有两种方式： 1.创建KVOController同时让self持有KVOCOntroller FBKVOController *KVOController = [FBKVOController controllerWithObserver:self]; self.KVOController = KVOController; 2.使用self.KVOController或self.KVOControllerNonRetaining作为观察者（分类 NSObject+FBKVOController会以懒加载的方式动态的给对象添加KVOController、KVOControllerNonRetaining属性）[推荐] */// observe clock对象的 date属性[self.KVOController observe:clock keyPath:@"date" options:NSKeyValueObservingOptionInitial | NSKeyValueObservingOptionNew block:^(ClockView *clockView, Clock *clock, NSDictionary *change) {  // block 回调更新 date  clockView.date = change[NSKeyValueChangeNewKey];}];</code></pre><h1 id="二、NSHashTable-和-NSMapTable"><a href="#二、NSHashTable-和-NSMapTable" class="headerlink" title="二、NSHashTable 和 NSMapTable"></a>二、NSHashTable 和 NSMapTable</h1><p><code>NSHashTable</code>和<code>NSMapTable</code>在平时的开发中用到的比较少，<code>NSHashTable</code>被设计为可以由于替换<code>NSMutableSet</code>的无序集。</p><ul><li><p><code>NSSet / NSMutableSet</code>持有成员的强引用，通过<code>hash</code>和<code>isEqual:</code>方法来检测成员的散列值和相等性。</p></li><li><p><code>NSHashTable</code>是可变集合</p></li><li><p>可通过传入<code>NSPointerFunctionsWeakMemory</code>参数弱引用储存对象，对象被释放后将自动移除</p></li><li><p>储存对象是无序的且不能储存相同的对象</p></li><li><p>在添加对象时可以复制对象后再存放</p></li><li><p><code>NSHashTable</code>可以存储任意的指针，通过指针来进行相等性和散列检查。</p></li></ul><p><code>NSMapTable</code>是更广泛意义上的<code>NSMutableDictionary</code>，它可以处理<code>key -&gt; obj</code>式的映射，也可以处理<code>obj -&gt; obj</code>的映射（关联数组 map）。</p><ul><li><code>NSDictionary / NSMutableDictionary</code>通过mutableCopy对键值进行拷贝，copy不会进行拷贝，但会使引用计数+1。</li><li><code>NSMapTable</code>是可变的</li><li>可通过传入<code>NSPointerFunctionsWeakMemory</code>参数对持有的<code>keys</code>和<code>values</code>弱引用，当键或者值当中的一个被释放时，整个就会被移除掉。</li><li>在添加<code>value</code>时对<code>value</code>进行复制</li><li><code>NSMapTable</code>可以存储任意的指针，通过指针来进行相等性和散列检查。</li></ul><h1 id="三、源码分析"><a href="#三、源码分析" class="headerlink" title="三、源码分析"></a>三、源码分析</h1><h2 id="3-1、FBKVOController-框架结构"><a href="#3-1、FBKVOController-框架结构" class="headerlink" title="3.1、FBKVOController 框架结构"></a>3.1、FBKVOController 框架结构</h2><ul><li><p>FBKVOController </p><ul><li>_FBKVOInfo </li><li>_FBKVOSharedController </li><li>FBKVOController </li></ul></li><li><p>NSObject+FBKVOController </p></li></ul><p><code>FBKVOController</code>分为三部分，其中<code>_FBKVOSharedController</code>是内部中间层，主要是用于将原生 KVO 的给观察对象添加监听的方式：</p><pre class=" language-objc"><code class="language-objc">- (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(nullable void *)context;</code></pre><p>转换为观察者主动观察被监听对象的方式：</p><pre class=" language-objc"><code class="language-objc">- (void)observe:(nullable id)object keyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options block:(FBKVONotificationBlock)block;</code></pre><p><code>_FBKVOInfo</code>也是内部类，用于储存 KVO 的处理内容：</p><pre class=" language-objc"><code class="language-objc">- (instancetype)initWithController:(FBKVOController *)controller                           keyPath:(NSString *)keyPath                           options:(NSKeyValueObservingOptions)options                             block:(nullable FBKVONotificationBlock)block                            action:(nullable SEL)action                           context:(nullable void *)context;</code></pre><p><code>FBKVOController</code>是实现 KVO 的主要类。<br><code>NSObject+FBKVOController</code>用于提供强引用和弱引用的<code>FBKVOController</code>。</p><h2 id="3-2、FBKVOController"><a href="#3-2、FBKVOController" class="headerlink" title="3.2、FBKVOController"></a>3.2、FBKVOController</h2><h3 id="初始化-FBKVOController"><a href="#初始化-FBKVOController" class="headerlink" title="初始化 FBKVOController"></a>初始化 FBKVOController</h3><p><code>FBKVOController</code>的<code>observe</code>对象是用<code>weak</code>持有的，对传入的观察者弱引用，以避免循环引用。</p><pre class=" language-objc"><code class="language-objc">@property (nullable, nonatomic, weak, readonly) id observer;</code></pre><p><code>NSPointerFunctionsOptions</code>定义了<code>NSMapTable</code>中的<code>key</code>和<code>value</code>的内存管理策略，内存选项决定了内存管理，个性化定义了哈希和相等：</p><ul><li><code>NSPointerFunctionsStrongMemory</code>创建了一个<code>retain/release</code>对象的集合，非常像常规的<code>NSSet</code>或<code>NSArray</code>。 </li><li><code>NSPointerFunctionsWeakMemory</code> 使用等价的<code>__weak</code>来存储对象并自动移除被销毁的对象。</li><li><code>NSPointerFunctionsCopyIn</code>在对象被加入到集合前拷贝它们，支持<code>NSCopying</code>协议。</li><li><code>NSPointerFunctionsObjectPersonality</code>使用对象的<code>hash</code>和<code>isEqual:</code>(默认)。=&gt; 值相等</li><li><code>NSPointerFunctionsObjectPointerPersonality</code>对于<code>isEqual:</code>和<code>hash</code>使用直接的指针比较。=&gt; 指针相等</li></ul><p>此处<code>retainObserved = true</code> ,  定义了<code>key</code>为强引用、指针比较，<code>value</code>为强引用、值比较的<code>NSMapTable</code>对象<code>_objectInfosMap</code>。</p><pre class=" language-objc"><code class="language-objc">- (instancetype)initWithObserver:(nullable id)observer retainObserved:(BOOL)retainObserved{  self = [super init];  if (nil != self) {    _observer = observer;    NSPointerFunctionsOptions keyOptions = retainObserved ? NSPointerFunctionsStrongMemory | NSPointerFunctionsObjectPointerPersonality : NSPointerFunctionsWeakMemory | NSPointerFunctionsObjectPointerPersonality;    _objectInfosMap = [[NSMapTable alloc] initWithKeyOptions:keyOptions valueOptions:NSPointerFunctionsStrongMemory | NSPointerFunctionsObjectPersonality capacity:0];    pthread_mutex_init(&_lock, NULL);  }  return self;}</code></pre><p>最后初始化自旋锁，自旋锁用于避免多个线程同时操作<code>critical section</code>。</p><h3 id="监听对象-keyPath"><a href="#监听对象-keyPath" class="headerlink" title="监听对象 keyPath"></a>监听对象 keyPath</h3><ul><li>监听对象、属性、回调<code>block</code>必须存在。</li><li>构造<code>_FBKVOInfo</code>对象，储存传入的 KVO 参数。</li><li>监听</li></ul><pre class=" language-objc"><code class="language-objc">- (void)observe:(nullable id)object keyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options block:(FBKVONotificationBlock)block{  NSAssert(0 != keyPath.length && NULL != block, @"missing required parameters observe:%@ keyPath:%@ block:%p", object, keyPath, block);  if (nil == object || 0 == keyPath.length || NULL == block) {    return;  }  // create info  _FBKVOInfo *info = [[_FBKVOInfo alloc] initWithController:self keyPath:keyPath options:options block:block];  // observe object with info  [self _observe:object info:info];}</code></pre><p>调用内部监听方法：</p><ul><li>首先开启自旋锁，防止其他线程操作干扰。</li><li>根据被观察的对象获取 <code>infos</code>，避免对同一个<code>keyPath</code>添加多次观察，防止奔溃。</li><li>如果没有与此次观察相同的<code>info</code>，则将<code>info</code>添加到<code>_objectInfosMap</code>的<code>infos</code>中，并注册到中间层<code>_FBKVOSharedController</code>中。</li></ul><pre class=" language-objc"><code class="language-objc">- (void)_observe:(id)object info:(_FBKVOInfo *)info{  // lock  pthread_mutex_lock(&_lock);  NSMutableSet *infos = [_objectInfosMap objectForKey:object];  // check for info existence  _FBKVOInfo *existingInfo = [infos member:info];  if (nil != existingInfo) {    // observation info already exists; do not observe it again    // unlock and return    pthread_mutex_unlock(&_lock);    return;  }  // lazilly create set of infos  if (nil == infos) {    infos = [NSMutableSet set];    [_objectInfosMap setObject:infos forKey:object];  }  // add info and oberve  [infos addObject:info];  // unlock prior to callout  pthread_mutex_unlock(&_lock);  [[_FBKVOSharedController sharedController] observe:object info:info];}</code></pre><h3 id="中间层-FBKVOSharedController-转发处理"><a href="#中间层-FBKVOSharedController-转发处理" class="headerlink" title="中间层 _FBKVOSharedController 转发处理"></a>中间层 _FBKVOSharedController 转发处理</h3><p><code>_FBKVOSharedController</code> 使用原生 KVO 对传进来的<code>object</code>进行观察。</p><pre class=" language-objc"><code class="language-objc">- (void)observe:(id)object info:(nullable _FBKVOInfo *)info{  if (nil == info) {    return;  }  // register info  pthread_mutex_lock(&_mutex);  [_infos addObject:info];  pthread_mutex_unlock(&_mutex);  // add observer  [object addObserver:self forKeyPath:info->_keyPath options:info->_options context:(void *)info];  if (info->_state == _FBKVOInfoStateInitial) {    info->_state = _FBKVOInfoStateObserving;  } else if (info->_state == _FBKVOInfoStateNotObserving) {    // this could happen when `NSKeyValueObservingOptionInitial` is one of the NSKeyValueObservingOptions,    // and the observer is unregistered within the callback block.    // at this time the object has been registered as an observer (in Foundation KVO),    // so we can safely unobserve it.    [object removeObserver:self forKeyPath:info->_keyPath context:(void *)info];  }}</code></pre><p>并在响应方法中，将原生 KVO 的给观察对象添加监听的方式转换为观察者主动观察被监听对象的方式, 并将监听到的<code>change</code>赋值到<code>block</code>中进行传递：</p><pre class=" language-objc"><code class="language-objc">- (void)observeValueForKeyPath:(nullable NSString *)keyPath                      ofObject:(nullable id)object                        change:(nullable NSDictionary<NSKeyValueChangeKey, id> *)change                       context:(nullable void *)context{  NSAssert(context, @"missing context keyPath:%@ object:%@ change:%@", keyPath, object, change);  _FBKVOInfo *info;  {    // lookup context in registered infos, taking out a strong reference only if it exists    pthread_mutex_lock(&_mutex);    info = [_infos member:(__bridge id)context];    pthread_mutex_unlock(&_mutex);  }  if (nil != info) {    // take strong reference to controller    FBKVOController *controller = info->_controller;    if (nil != controller) {      // take strong reference to observer      id observer = controller.observer;      if (nil != observer) {        // dispatch custom block or action, fall back to default action        if (info->_block) {          NSDictionary<NSKeyValueChangeKey, id> *changeWithKeyPath = change;          // add the keyPath to the change dictionary for clarity when mulitple keyPaths are being observed          if (keyPath) {            NSMutableDictionary<NSString *, id> *mChange = [NSMutableDictionary dictionaryWithObject:keyPath forKey:FBKVONotificationKeyPathKey];            [mChange addEntriesFromDictionary:change];            changeWithKeyPath = [mChange copy];          }          info->_block(observer, object, changeWithKeyPath);        } else if (info->_action) {#pragma clang diagnostic push#pragma clang diagnostic ignored "-Warc-performSelector-leaks"          [observer performSelector:info->_action withObject:change withObject:object];#pragma clang diagnostic pop        } else {          [observer observeValueForKeyPath:keyPath ofObject:object change:change context:info->_context];        }      }    }  }}</code></pre><h3 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h3><p>在以下<code>block</code>中使用到 <code>self</code>，势必会造成循环引用的问题，但是要给<code>self.layer</code>赋值，那就需要加上<code>@weakify(self)；</code>。为了解决这个问题， FBKVOController 做了巧妙的处理：初始化时将<code>observe</code>传入，并做了<code>weak</code>处理，对其弱引用，最后再将<code>observe</code>添加到<code>block</code>回调中，这样就可以直接在<code>block</code>回调中使用<code>observe</code>来替代<code>self</code>。</p><pre class=" language-objc"><code class="language-objc">[self.KVOController observe:clock keyPath:@"date" options:NSKeyValueObservingOptionInitial | NSKeyValueObservingOptionNew block:^(ClockView *clockView, Clock *clock, NSDictionary *change) {      // update observer with new value      clockView.layer.date = change[NSKeyValueChangeNewKey]; }];</code></pre><h3 id="移除监听"><a href="#移除监听" class="headerlink" title="移除监听"></a>移除监听</h3><p><code>FBKVOController</code>实现了自释放，<code>self.KVOController</code>会随着观察者释放而释放，当<code>KVOController</code>释放时，在其<code>dealloc</code>方法中移除监听，巧妙的将观察者的<code>remove</code>转移到动态属性的<code>dealloc</code>函数中。</p><h1 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h1><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ul><li><p>它对原生KVO监听函数进行了封装，使用<code>block</code>或<code>@selector(SEL)</code>的回调操作，极大的简化了 KVO 调用方式，避免了在程序中处理通知回调函数逻辑散落的到处都是。<br></p></li><li><p>将移除观察者方法巧妙的放到<code>dealloc</code>方法中，实现“自释放”。<br></p></li></ul><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ul><li>无法监听自己的属性,会造成循环引用。<br></li></ul><h1 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h1><p><a href="http://www.isaced.com/post-235.html" target="_blank" rel="noopener">http://www.isaced.com/post-235.html</a><br></p><p><a href="https://github.com/facebook/KVOController" target="_blank" rel="noopener">FBKVOController</a><br></p><p><a href="https://nshipster.cn/nshashtable-and-nsmaptable/" target="_blank" rel="noopener">https://nshipster.cn/nshashtable-and-nsmaptable/</a><br></p><p><a href="https://mp.weixin.qq.com/s/ZrJhx8ItmUBco0frxl2NJw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/ZrJhx8ItmUBco0frxl2NJw</a><br></p>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KVO </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python使用splinter实现SDP组件自动化发布</title>
      <link href="/2018/06/17/splinter/"/>
      <url>/2018/06/17/splinter/</url>
      
        <content type="html"><![CDATA[<p># </p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>在ND项目开发中，每码完一个版本的代码或是改完bug都需要发布到SDP上，以便打包测试。</li><li>发布代码涉及打标签、检查<code>podfile</code>与<code>podspec</code>一致性（<code>appfactory</code>已提供验证方法）、发布等过程。发布流程较为麻烦。</li><li>开发者可以使用SDP组件自动化发布工具更方便的发布组件。</li></ul><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>使用<code>python</code>的 <code>splinter</code>库模拟组件发布流程，实现自动化发布：</p><ul><li>下载Browser驱动（本文使用Chrome）</li><li>提取<code>podSpec</code>文件中的版本号和<code>homepage</code>。</li><li>打开组件标签页面，打上标签。</li><li>进入SDP对应的组件发布页面进行发布。</li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="一、安装脚本"><a href="#一、安装脚本" class="headerlink" title="一、安装脚本"></a>一、安装脚本</h3><ol><li><p>确保安装了Chrome</p></li><li><p>确保安装python2.X</p></li><li><p>确保安装pip</p></li><li><p>安装SDP工具： pip install SDPPublishTool (   pip install SDPPublishTool-0.0.3-py2-none-any.whl   )</p></li><li><p>移动执行脚本到根目录： mv  /usr/local/lib/python2.7/site-packages/SDP.*  ~/</p></li></ol><h3 id="二、发布命令："><a href="#二、发布命令：" class="headerlink" title="二、发布命令："></a>二、发布命令：</h3><p>python ~/sdp.py（确保 podspec 文件内 s.homepage 为对应组件 gitlab 地址，且s.version为要发布的版本号）</p><ul><li>userName : gitlab用户名（工号）</li><li>password : 工号密码</li><li>project dir ： 要发布的组件目录</li><li>code-branch(dev or test or release)：发布分支分别对应开发、测试、正式环境</li><li>publish content：发布内容（可为空）</li></ul><p><img src="/2018/06/17/splinter/demo.gif" alt="demo"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="Splinter"><a href="#Splinter" class="headerlink" title="Splinter"></a>Splinter</h3><ul><li>Splinter 是一个基于python的开源测试工具，可以进行基于浏览器的的自动化操作。</li><li>可以通过安装特定驱动（Firefox、Chrome）模拟浏览器行为，访问指定的URL。</li><li>支持模拟鼠标的动作，比如滑动到某个按钮上，焦点离开某个按钮等等。</li><li>支持模拟键盘的输入操作，对input等控件的输入可以模拟用户的输入。</li><li>最重要的，splinter的API非常简单，配合官方的文档学习成本几乎是0。</li><li>支持cookie操作，可以很方便的添加和删除cookie。</li><li>支持直接运行js或者调用页面的js。</li><li>支持模拟上传文件。</li><li>对radio和checkbox有专门的api支持，非常方便。</li><li>支持快速的获取页面的元素或者判断是否存在文本，用于开发判断页面提示信息是否准确非常方便。</li></ul><h3 id="Splinter-的使用"><a href="#Splinter-的使用" class="headerlink" title="Splinter 的使用"></a>Splinter 的使用</h3><ul><li><p>指定浏览器驱动</p><pre class=" language-python"><code class="language-python">b <span class="token operator">=</span> Browser<span class="token punctuation">(</span><span class="token string">"chrome"</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>visit<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span>   </code></pre></li></ul><ul><li><p>查找页面元素</p><pre class=" language-python"><code class="language-python">browser<span class="token punctuation">.</span>find_by_css<span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>find_by_xpath<span class="token punctuation">(</span><span class="token string">'//h1'</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>find_by_tag<span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>find_by_name<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>find_by_text<span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>find_by_id<span class="token punctuation">(</span><span class="token string">'firstheader'</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>find_by_value<span class="token punctuation">(</span><span class="token string">'query'</span><span class="token punctuation">)</span>first_found <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_by_name<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>firstlast_found <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_by_name<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lastsecond_found <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_by_name<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">//</span>链接links_found <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_link_by_text<span class="token punctuation">(</span><span class="token string">'Link for Example.com'</span><span class="token punctuation">)</span>links_found <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_link_by_partial_text<span class="token punctuation">(</span><span class="token string">'for Example'</span><span class="token punctuation">)</span>links_found <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_link_by_href<span class="token punctuation">(</span><span class="token string">'http://example.com'</span><span class="token punctuation">)</span>links_found <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_link_by_partial_href<span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span></code></pre></li></ul><ul><li><p>填充点击事件</p><pre class=" language-python"><code class="language-python">b<span class="token punctuation">.</span>fill<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> input_name<span class="token punctuation">)</span>b<span class="token punctuation">.</span>fill<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span> input_pwd<span class="token punctuation">)</span>b<span class="token punctuation">.</span>find_by_id<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul><h3 id="实现源码"><a href="#实现源码" class="headerlink" title="实现源码"></a>实现源码</h3><h4 id="下载驱动"><a href="#下载驱动" class="headerlink" title="下载驱动"></a>下载驱动</h4><pre class=" language-python"><code class="language-python">packagePath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>__file__<span class="token punctuation">)</span>file_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> packagePath<span class="token punctuation">,</span> <span class="token string">'site-packages/chromedriver'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"Downloading chromedriver..."</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># replace with url you need</span>    url <span class="token operator">=</span> <span class="token string">'http://npm.taobao.org/mirrors/chromedriver/70.0.3538.16/chromedriver_mac64.zip'</span>    <span class="token keyword">def</span> <span class="token function">down</span><span class="token punctuation">(</span>_save_path<span class="token punctuation">,</span> _url<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            urllib<span class="token punctuation">.</span>urlretrieve<span class="token punctuation">(</span>_url<span class="token punctuation">,</span> _save_path<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">'\nError when retrieving the URL:'</span><span class="token punctuation">,</span> _save_path    down<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> url<span class="token punctuation">)</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"Download finish"</span><span class="token punctuation">)</span> </code></pre><h4 id="输入用户信息"><a href="#输入用户信息" class="headerlink" title="输入用户信息"></a>输入用户信息</h4><ul><li><p>用户信息数据库存储与读取 （暂未加密）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sqlite3<span class="token comment" spellcheck="true"># 建一个数据库</span><span class="token keyword">def</span> <span class="token function">create_sql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sql <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"user_data.db"</span><span class="token punctuation">)</span>    sql<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>"CREATE TABLE IF NOT EXISTS \            Writers<span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span>"<span class="token punctuation">)</span>    sql<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_cursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    create_sql<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"user_data.db"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">insert_user</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fetch_username<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">is</span> None<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>fetch_pwd <span class="token keyword">is</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>    sql <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"user_data.db"</span><span class="token punctuation">)</span>    sql<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"insert into Writers(username,password) values(?,?)"</span><span class="token punctuation">,</span>              <span class="token punctuation">(</span>username<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">)</span>    sql<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print "添加成功"</span>    sql<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fetch_username</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"user_data.db"</span><span class="token punctuation">)</span>      c <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select username from Writers"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">fetch_pwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"user_data.db"</span><span class="token punctuation">)</span>      c <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select password from Writers"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fetch_username</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"user_data.db"</span><span class="token punctuation">)</span>      c <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select username from Writers"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">fetch_pwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"user_data.db"</span><span class="token punctuation">)</span>      c <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select password from Writers"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul><ul><li><p>输入用户信息、发布环境、发布内容</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> dataBase<span class="token punctuation">.</span>dataBase <span class="token keyword">import</span> get_cursor<span class="token keyword">from</span> dataBase<span class="token punctuation">.</span>dataBase <span class="token keyword">import</span> insert_user<span class="token keyword">from</span> dataBase<span class="token punctuation">.</span>dataBase <span class="token keyword">import</span> fetch_pwd<span class="token keyword">from</span> dataBase<span class="token punctuation">.</span>dataBase <span class="token keyword">import</span> fetch_username<span class="token comment" spellcheck="true"># 用户信息</span>c <span class="token operator">=</span> get_cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>username <span class="token operator">=</span> fetch_username<span class="token punctuation">(</span><span class="token punctuation">)</span>pwd <span class="token operator">=</span> fetch_pwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token keyword">is</span> None<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>pwd <span class="token keyword">is</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 输入信息</span>    username <span class="token operator">=</span> raw_input<span class="token punctuation">(</span><span class="token string">'please input userName:'</span><span class="token punctuation">)</span>    pwd <span class="token operator">=</span> getpass<span class="token punctuation">.</span>getpass<span class="token punctuation">(</span><span class="token string">'please input password:'</span><span class="token punctuation">)</span>env <span class="token operator">=</span> raw_input<span class="token punctuation">(</span><span class="token string">'please input code-branch(dev or test or release):'</span><span class="token punctuation">)</span>detail <span class="token operator">=</span> raw_input<span class="token punctuation">(</span><span class="token string">'please input publish content:'</span><span class="token punctuation">)</span></code></pre></li></ul><h4 id="检查获取组件的podspec"><a href="#检查获取组件的podspec" class="headerlink" title="检查获取组件的podspec"></a>检查获取组件的podspec</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 判断目录路径是否存在</span><span class="token keyword">def</span> <span class="token function">file_name</span><span class="token punctuation">(</span>file_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> roots<span class="token punctuation">,</span> dirs<span class="token punctuation">,</span> files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>file_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> child_file <span class="token keyword">in</span> files<span class="token punctuation">:</span>            <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>child_file<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.podspec'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>roots<span class="token punctuation">,</span> child_file<span class="token punctuation">)</span>filename <span class="token operator">=</span> file_name<span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token keyword">while</span> filename <span class="token keyword">is</span> None<span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">'invalid path'</span>    dir <span class="token operator">=</span> raw_input<span class="token punctuation">(</span><span class="token string">'please input project dir:'</span><span class="token punctuation">)</span>    filename <span class="token operator">=</span> file_name<span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span></code></pre><ul><li><p>提取组件名、版本号（标签）、homePage</p><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 版本号</span>versionNo <span class="token operator">=</span> <span class="token string">''</span><span class="token comment" spellcheck="true"># 组件名</span>component_name <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"s.name"</span> <span class="token keyword">in</span> line<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"{"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tempList <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">)</span>        component_name <span class="token operator">=</span> tempList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">print</span> component_name    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"s.version"</span> <span class="token keyword">in</span> line<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"{"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tempList <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> str2 <span class="token keyword">in</span> tempList<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"."</span> <span class="token keyword">in</span> str2<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>str2<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                versionNo <span class="token operator">=</span> str2                <span class="token keyword">print</span> versionNo    <span class="token keyword">if</span> <span class="token string">"s.homepage"</span> <span class="token keyword">in</span> line<span class="token punctuation">:</span>        tempList <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> str1 <span class="token keyword">in</span> tempList<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token string">"http://"</span> <span class="token keyword">in</span> str1<span class="token punctuation">:</span>                url <span class="token operator">=</span> str1                <span class="token keyword">print</span> urlf<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul><h4 id><a href="#" class="headerlink" title=" "></a> </h4><p>打Tag</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 版本标签</span>b <span class="token operator">=</span> Browser<span class="token punctuation">(</span><span class="token string">"chrome"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_version_tag</span><span class="token punctuation">(</span>input_name<span class="token punctuation">,</span> input_pwd<span class="token punctuation">)</span><span class="token punctuation">:</span>    b<span class="token punctuation">.</span>visit<span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">'/tags/new'</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    b<span class="token punctuation">.</span>fill<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> input_name<span class="token punctuation">)</span>    b<span class="token punctuation">.</span>fill<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span> input_pwd<span class="token punctuation">)</span>    b<span class="token punctuation">.</span>find_by_name<span class="token punctuation">(</span><span class="token string">'remember_me'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    b<span class="token punctuation">.</span>find_by_name<span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> b<span class="token punctuation">.</span>find_by_id<span class="token punctuation">(</span><span class="token string">'tag_name'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">'invalid userName or password'</span>        input_name <span class="token operator">=</span> raw_input<span class="token punctuation">(</span><span class="token string">'please input userName:'</span><span class="token punctuation">)</span>        input_pwd <span class="token operator">=</span> getpass<span class="token punctuation">.</span>getpass<span class="token punctuation">(</span><span class="token string">'please input password:'</span><span class="token punctuation">)</span>        add_version_tag<span class="token punctuation">(</span>input_name<span class="token punctuation">,</span> input_pwd<span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">'login fail'</span>        <span class="token keyword">return</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        insert_user<span class="token punctuation">(</span>input_name<span class="token punctuation">,</span> input_pwd<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span>login_success <span class="token operator">=</span> add_version_tag<span class="token punctuation">(</span>username<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span>b<span class="token punctuation">.</span>fill<span class="token punctuation">(</span><span class="token string">'tag_name'</span><span class="token punctuation">,</span> versionNo<span class="token punctuation">)</span>b<span class="token punctuation">.</span>find_by_name<span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 发布</span>b<span class="token punctuation">.</span>visit<span class="token punctuation">(</span><span class="token string">'http://sdp.nd/main.html'</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>find_by_id<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>username <span class="token operator">=</span> fetch_username<span class="token punctuation">(</span><span class="token punctuation">)</span>pwd <span class="token operator">=</span> fetch_pwd<span class="token punctuation">(</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>find_by_id<span class="token punctuation">(</span><span class="token string">'object_id'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fill<span class="token punctuation">(</span>username<span class="token punctuation">)</span>b<span class="token punctuation">.</span>find_by_id<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fill<span class="token punctuation">(</span>pwd<span class="token punctuation">)</span>b<span class="token punctuation">.</span>find_by_name<span class="token punctuation">(</span><span class="token string">'keep_pwd'</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>find_by_id<span class="token punctuation">(</span><span class="token string">'confirmLogin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>visit<span class="token punctuation">(</span><span class="token string">'http://sdp.nd/main.html'</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>find_by_id<span class="token punctuation">(</span><span class="token string">'appSearchTxt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fill<span class="token punctuation">(</span>component_name<span class="token punctuation">)</span><span class="token keyword">while</span> b<span class="token punctuation">.</span>find_link_by_partial_href<span class="token punctuation">(</span><span class="token string">'/modules/mobileComponent/detail.html?appId'</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">'.'</span>b<span class="token punctuation">.</span>find_link_by_partial_href<span class="token punctuation">(</span><span class="token string">'/modules/mobileComponent/detail.html?appId'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 选择分支</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>find_by_xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[4]/a[2]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>find_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="appDeatil"]/div[1]/span[2]/span'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>find_by_id<span class="token punctuation">(</span>env_id<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>find_by_tag<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>find_by_id<span class="token punctuation">(</span><span class="token string">'publish'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 版本号</span>b<span class="token punctuation">.</span>find_by_id<span class="token punctuation">(</span><span class="token string">'version'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fill<span class="token punctuation">(</span>versionNo<span class="token punctuation">)</span>b<span class="token punctuation">.</span>find_by_id<span class="token punctuation">(</span><span class="token string">'versionDesc'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fill<span class="token punctuation">(</span>detail<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># b.find_by_xpath('//*[@id="gitlist"]/div').first.click()</span><span class="token comment" spellcheck="true"># b.find_by_id('publishConfirm').click()</span></code></pre><h3 id="python打包发布pip"><a href="#python打包发布pip" class="headerlink" title="python打包发布pip"></a>python打包发布pip</h3><ul><li><p>注册PyPi</p></li><li><p>setup.py</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true">#-*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true">#############################################</span><span class="token comment" spellcheck="true"># File Name: setup.py</span><span class="token comment" spellcheck="true"># Author: tanzou</span><span class="token comment" spellcheck="true"># Mail: 'tanzou34@gmail.com'</span><span class="token comment" spellcheck="true"># Created Time:  2018-10-10 19:17:34</span><span class="token comment" spellcheck="true">#############################################</span> <span class="token keyword">from</span> setuptools <span class="token keyword">import</span> setup<span class="token punctuation">,</span> find_packages  setup<span class="token punctuation">(</span>        name<span class="token operator">=</span><span class="token string">'SDPPublishTool'</span><span class="token punctuation">,</span>        version <span class="token operator">=</span> <span class="token string">"0.0.4"</span><span class="token punctuation">,</span>        keywords <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"pip"</span><span class="token punctuation">,</span> <span class="token string">"SDP"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        zip_safe <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>         description <span class="token operator">=</span> <span class="token string">"SDP publish"</span><span class="token punctuation">,</span>        long_description <span class="token operator">=</span> <span class="token string">"SDP publish for NetDragon"</span><span class="token punctuation">,</span>        license <span class="token operator">=</span> <span class="token string">"MIT Licence"</span><span class="token punctuation">,</span>        url <span class="token operator">=</span> <span class="token string">"https://github.com/ZouMac/SDPPublishTool"</span><span class="token punctuation">,</span>        author <span class="token operator">=</span> <span class="token string">"tanzou"</span><span class="token punctuation">,</span>        author_email <span class="token operator">=</span> <span class="token string">"tanzou34@gmail.com"</span><span class="token punctuation">,</span>        packages <span class="token operator">=</span> find_packages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        include_package_data <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span>        platforms <span class="token operator">=</span> <span class="token string">"any"</span><span class="token punctuation">,</span>        install_requires <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"splinter"</span><span class="token punctuation">,</span> <span class="token string">"getpass2"</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span></code></pre></li></ul><ul><li>打包上传</li></ul><pre class=" language-python"><code class="language-python">python setup<span class="token punctuation">.</span>py sdist     <span class="token comment" spellcheck="true">#会生成SDPPublishTool-0.0.3.tar.gz文件用于上传到PyPi上</span>twine upload dist<span class="token operator">/</span>magetool<span class="token number">-0.1</span><span class="token punctuation">.</span><span class="token number">0.</span>tar<span class="token punctuation">.</span>gz  <span class="token comment" spellcheck="true">#如果报权限问题，可以在前面加上python -m</span></code></pre><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> splinter </tag>
            
            <tag> 自动化发布 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>load 耗时检测</title>
      <link href="/2018/06/14/loadtimecheck/"/>
      <url>/2018/06/14/loadtimecheck/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>目前部分产品反馈启动时间还是较慢。但目前启动时间耗时统计方案无法统计到 main 方法之前的 load 方法耗时，无法定位耗时长的组件代码。</p><h3 id="第三方方案：Hook所有-load方法（包括Category）"><a href="#第三方方案：Hook所有-load方法（包括Category）" class="headerlink" title="第三方方案：Hook所有+load方法（包括Category）"></a>第三方方案：<a href="https://mp.weixin.qq.com/s/kL__CM3CfP_7i8Obg8qzWQ" target="_blank" rel="noopener">Hook所有+load方法（包括Category）</a></h3><p>该方案通过 Hook 所有 Class 中的 load 方法的方式实现了 load 方法的替换。在替换的方法前后加入耗时统计函数，从而实现 load 方法耗时统计。</p><p>但是该方案遍历 load 方法的过程是通过查找所有的镜像，然后通过 <code>const char * _Nonnull * _Nullable objc_copyClassNamesForImage(const char * _Nonnull image,  unsigned int * _Nullable outCount)</code> 方法找到所有的类，再遍历所有类中的所有方法，从而捞出了所有的 +load 方法。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>这个方案中有一个非常值得借鉴的点：将 Hook 方法写在动态库中，若让主工程包只依赖该动态库。使得该动态库一定可以最先被加载。在该动态库中唯一一个 +load 方法中去检测整个 App 中所有的类，确保可以在其他任何类加载前对其进行检测，和方法替换。</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>以目前一个中等大小的应用工厂组装产品为例，需要耗时大约150ms，以99u这样的平台型 App 而言，耗时至少会增加一倍以上。而这一切都是在工程启动的时候做的，若在每次启动时都开始 load 耗时检测，那这个 Hook 过程的耗时肯定不能接受。哪怕是选择启用，这样的耗时也十分影响体验。所以本篇文章将说明如何在这个方案的基础上进行改进。</p><h3 id="load-耗时检测的思路："><a href="#load-耗时检测的思路：" class="headerlink" title="load 耗时检测的思路："></a>load 耗时检测的思路：</h3><h4 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h4><p>通过在最早 load 的方法中加入一个获取到所有需要被执行load方法的类及分类，并对其进行 method swizzling 替换。</p><h4 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h4><p>对执行 load 方法的程序调用栈上的关键函数进行 fishhook ，从而实现获取到 load 方法关键信息，并对关信息（如 IMP、SEL 、Class 等）做处理。</p><h3 id="探究-load-方法调用过程"><a href="#探究-load-方法调用过程" class="headerlink" title="探究 + load 方法调用过程"></a>探究 + load 方法调用过程</h3><h4 id="dyld-和-objc-库静态分析"><a href="#dyld-和-objc-库静态分析" class="headerlink" title="dyld 和 objc 库静态分析"></a>dyld 和 objc 库静态分析</h4><p>从 App 启动到加载到这个动态库第一个 load 方法过程中经历了哪些过程呢？</p><p>我们可以通过打断点的方式查看这个堆栈。</p><p><img src="/2018/06/14/loadtimecheck/load_progress.png" alt="load_progress"></p><p>这里可以看到程序入口是：</p><p>_dyld_start ，这是一个汇编的入口，其目的是加载、启动 dyld 库解析 App 的动态库依赖，然后在 objc 库中进行image 的加载。这两个库在 <code>/usr/lib</code> 路径下，我们可以通过 Mach-O 文件看到其中的函数名。由于它是开源的。我们可以在 <a href="https://opensource.apple.com/source/dyld/" target="_blank" rel="noopener">dyld 源码（在线版）</a>  在线阅读它，也可以通过 <a href="https://opensource.apple.com/tarballs/dyld/" target="_blank" rel="noopener">dyld源码（下载版）</a> 下载到本地阅读。</p><p>我们下载 dyld-551.4 、objc4-723 这两个库到本地进行静态分析。</p><p>堆栈中可以看到，在栈底处 <code>12 dyld::_main</code> 中正式地开始加载程序，进行动态库以来解析等。在 <code>3 dyld::notifySingle</code> 中调用 objc 中的 <code>load_images</code> 进行镜像的加载，在加载过程中进行了 load 的初始化。</p><p>知道了 +load 初始化的大致过程后，我们可以深入代码细节进行分析。</p><p>我们从栈顶开始反向看 +load 方法被调用过程。在 objc 库中的 <code>objc-loadmethod.m</code> 文件找到 <code>call_class_loads</code> 方法：</p><pre class=" language-objc"><code class="language-objc">static void call_class_loads(void){    int i;    // Detach current loadable list.    //这是所有符合条件可被执行load的类    struct loadable_class *classes = loadable_classes;    int used = loadable_classes_used;    loadable_classes = nil;    loadable_classes_allocated = 0;    loadable_classes_used = 0;    // Call all +loads for the detached list.    for (i = 0; i < used; i++) {        Class cls = classes[i].cls;        //此处取到 load 方法的 IMP        load_method_t load_method = (load_method_t)classes[i].method;        if (!cls) continue;         if (PrintLoading) {            _objc_inform("LOAD: +[%s load]\n", cls->nameForLogging());        }        //此次进行load初始化        (*load_method)(cls, SEL_load);    }    // Destroy the detached list.    if (classes) free(classes);}</code></pre><p>这一步中有两个地方值得注意：</p><ul><li>所有需要被执行 load 方法的类已经被放到 loadable_classes 链表中了</li><li>load 的 IMP 是存在结构体中的。这个关键信息在本次开发中虽然没有用上，但在后续的思考和改进中存在一定的利用空间。</li></ul><p>该方法被 <code>call_load_methods</code> 方法调用，<code>call_class_loads</code> 方法实现如下：</p><pre class=" language-objc"><code class="language-objc">void call_load_methods(void) {    static bool loading = NO;    bool more_categories;    loadMethodLock.assertLocked();    // Re-entrant calls do nothing; the outermost call will finish the job.    if (loading) return;    loading = YES;    void *pool = objc_autoreleasePoolPush();    do {        // 1. Repeatedly call class +loads until there aren't any more        while (loadable_classes_used > 0) {            //加载类 load            call_class_loads();        }        // 2. Call category +loads ONCE        //加载分类 load        more_categories = call_category_loads();        // 3. Run more +loads if there are classes OR more untried categories    } while (loadable_classes_used > 0  ||  more_categories);    objc_autoreleasePoolPop(pool);    loading = NO;}</code></pre><p>该方法就是先加载所有类的 load，再加载所有分类的 load。该方法被 <code>load_images</code> 调用</p><pre class=" language-objc"><code class="language-objc">void load_images(const char *path __unused, const struct mach_header *mh) {    // Return without taking locks if there are no +load methods here.    if (!hasLoadMethods((const headerType *)mh)) return;    recursive_mutex_locker_t lock(loadMethodLock);    // Discover load methods {        rwlock_writer_t lock2(runtimeLock);        prepare_load_methods((const headerType *)mh);    }    // Call +load methods (without runtimeLock - re-entrant)    call_load_methods();}</code></pre><p>上文说到：进行 load_method 调用的时候，所有需要被调用的 load 的方法已经被加入到链表中了，那么它们是怎么被加入到链表中、何时被加入到链表中呢？</p><p>答案是：在 <code>load_images</code> 中的 <code>prepare_load_methods((const headerType *)mh);</code>进行镜像文件预加载/解析的时候生成了 <code>loadable_classes</code> 链表。</p><p><code>prepare_load_methods</code> 方法实现如下：</p><pre class=" language-objc"><code class="language-objc">void prepare_load_methods(const headerType *mhdr){    size_t count, i;    runtimeLock.assertWriting();    //此处获取到所有需要被执行load方法的类    classref_t *classlist =         _getObjc2NonlazyClassList(mhdr, &count);    for (i = 0; i < count; i++) {        //此处对类进行remap        schedule_class_load(remapClass(classlist[i]));    }    //此处获取到所有需要被执行load方法的分类    category_t **categorylist = _getObjc2NonlazyCategoryList(mhdr, &count);    for (i = 0; i < count; i++) {        category_t *cat = categorylist[i];        //此处肤对分类进行remap        Class cls = remapClass(cat->cls);        if (!cls) continue;  // category for ignored weak-linked class        realizeClass(cls);        assert(cls->ISA()->isRealized());        add_category_to_loadable_list(cat);    }}</code></pre><p>通过 <code>_getObjc2NonlazyClassList</code> 和 <code>_getObjc2NonlazyCategoryList</code> 分别获取到需要被执行 load 方法的类和分类的链表。这两个方法内部实现如下：</p><pre class=" language-c++"><code class="language-c++">typedef struct classref * classref_t;struct category_t {    const char *name;    classref_t cls;    struct method_list_t *instanceMethods;    struct method_list_t *classMethods;    struct protocol_list_t *protocols;    struct property_list_t *instanceProperties;    // Fields below this point are not always present on disk.    struct property_list_t *_classProperties;    method_list_t *methodsForMeta(bool isMeta) {        if (isMeta) return classMethods;        else return instanceMethods;    }    property_list_t *propertiesForMeta(bool isMeta, struct header_info *hi);};#define GETSECT(name, type, sectname)                                   \    type *name(const headerType *mhdr, size_t *outCount) {              \        return getDataSection<type>(mhdr, sectname, nil, outCount);     \    }                                                                   \    type *name(const header_info *hi, size_t *outCount) {               \        return getDataSection<type>(hi->mhdr(), sectname, nil, outCount); \    }GETSECT(_getObjc2NonlazyClassList,    classref_t,      "__objc_nlclslist");GETSECT(_getObjc2NonlazyCategoryList, category_t *,    "__objc_nlcatlist");template <typename T>T* getDataSection(const headerType *mhdr, const char *sectname, size_t *outBytes, size_t *outCount) {    unsigned long byteCount = 0;    T* data = (T*)getsectiondata(mhdr, "__DATA", sectname, &byteCount);    if (!data) {        data = (T*)getsectiondata(mhdr, "__DATA_CONST", sectname, &byteCount);    }    if (!data) {        data = (T*)getsectiondata(mhdr, "__DATA_DIRTY", sectname, &byteCount);    }    if (outBytes) *outBytes = byteCount;    if (outCount) *outCount = byteCount / sizeof(T);    return data;}</code></pre><p>此处用的C++ 的模板方法从 Mach-O 文件的 <code>__DATA</code> 章节中的 <code>__objc_nlclslist</code> 和 <code>__objc_nlcatlist</code> 段中分别获取到指向类描述结构体、分类描述结构体地址的指针。然后通过 remap 的方式拿到类对象、分类对象的指针，加入链表。</p><h4 id="逆向-Mach-O-文件进行验证。"><a href="#逆向-Mach-O-文件进行验证。" class="headerlink" title="逆向 Mach-O 文件进行验证。"></a>逆向 Mach-O 文件进行验证。</h4><p>为验证我们的解析结果，我们取一个现有 App 中的 Mach-O 文件进行检验：</p><p>用 MachOView 工具打开 Mach-O 文件，确实在其中看到 <code>__objc_nlclslist</code> 和 <code>__objc_nlcatlist</code> 等段。</p><p><img src="/2018/06/14/loadtimecheck/mach-o_list.png" alt="o_list"></p><p>从<code>NonlazyClass</code>的命名上可以推断出：含有 load 方法的类属于<strong>非懒加载类</strong>，</p><p>同理，从从<code>NonlazyCategory</code>的命名上可以推断出：含有 load 方法的类属于<strong>非懒加载分类</strong>。</p><h5 id="非懒加载类存储方式"><a href="#非懒加载类存储方式" class="headerlink" title="非懒加载类存储方式"></a>非懒加载类存储方式</h5><p><code>__objc_nlclslist</code>段部分数据展示如下：</p><p><img src="/2018/06/14/loadtimecheck/mach-o_objc_nlclslist.png" alt="o_objc_nlclslist"></p><p>里面的数据如 <code>68 67 fc 00 01 00 00 00</code> ，此处存储的是大端序的数据，将其转化为小端序后即： <code>00 00 00 01 00 fc 67 68</code> 。</p><p>找到 <code>00 00 00 01 00 fc 67 68</code> 地址上的数据，确实是存储类描述结构体（即<code>struct classref</code>）数据的地址。经验证该类确实实现了 load 方法。所以大致验证我们的猜测正确。</p><p><img src="/2018/06/14/loadtimecheck/mach-o_nlclass.png" alt="mach-o_nlclass"></p><p>objc 库通过读取 Mach-O 文件中非懒加载类表和非懒加载分类表的方式实现 + load 方法加载的方案确实优于第三方提供的遍历所有类然后筛选出实现了 + load 方法的类列表的方案。</p><h5 id="非懒加载分类存储方式"><a href="#非懒加载分类存储方式" class="headerlink" title="非懒加载分类存储方式"></a>非懒加载分类存储方式</h5><p>同理，我们可以找到 <code>__objc_nlcatlist</code> 段部分数据，如下所示：</p><p><img src="/2018/06/14/loadtimecheck/mach-o_nlcategory.png" alt="mach-o_nlcategory"></p><p>里面的数据如 <code>40 44 D9 00 01 00 00 00</code> ，将其转化为小端序后即： <code>00 00 00 01 00 D9 44 40</code> 。</p><p>找到 <code>00 00 00 01 00 D9 44 40</code> 地址上的数据，确实是存储分类描述结构体（即 <code>struct category_t</code> ）数据的地址。</p><p><img src="/2018/06/14/loadtimecheck/mach-o_category_apfkithelper.png" alt="mach-o_category_apfkithelper"></p><h3 id="方案实现"><a href="#方案实现" class="headerlink" title="方案实现"></a>方案实现</h3><h4 id="基于思路一实现："><a href="#基于思路一实现：" class="headerlink" title="基于思路一实现："></a>基于思路一实现：</h4><p>弄懂 <code>load</code> 函数遍历、调用过程，但是可以看到的是以上涉及的方法都是 objc 的内部方法，外部无法进行直接调用。所以就得精简代码后，进行整合、使用。</p><p>首先：从动态库加载的时候，遍历需要加载的镜像列表，找到我们需要解析的镜像：</p><pre class=" language-objc"><code class="language-objc">/** 获取主工程 Mach-O 文件入口指针 @return Mach-O 文件入口指针 */const struct mach_header *get_target_image_header() {    if (target_image_header == NULL) {        for (int i = 0; i < _dyld_image_count(); i++) {            const char *image_name = _dyld_get_image_name(i);             const char *target_image_name = ((NSString *)[[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleName"]).UTF8String;            if (strstr(image_name, target_image_name) != NULL) {                target_image_header = _dyld_get_image_header(i);                break;            }        }    }    return target_image_header;}</code></pre><p>然后从镜像文件中捞出我们想要的非懒加载类和分类链表：其中 <code>_getObjc2NonlazyCategoryList</code> 和 <code>_getObjc2NonlazyClassList</code> 可以基本照搬 objc 库中实现。</p><pre class=" language-objc"><code class="language-objc">category_t **get_non_lazy_categary_list(size_t *count) {    category_t **nlcatlist = NULL;    nlcatlist = _getObjc2NonlazyCategoryList((headerType *)get_target_image_header(), count);    return nlcatlist;}classref_t *get_non_lazy_class_list(size_t *count) {    classref_t *nlclslist = NULL;    nlclslist = _getObjc2NonlazyClassList((headerType *)get_target_image_header(), count);    return nlclslist;}</code></pre><p>所以整个遍历非懒加载类及分类并通过 method swizzling 替换的过程如下：</p><pre class=" language-objc"><code class="language-objc">+ (void)load {    NSString *path = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES).firstObject;    NSFileManager *fileManager = [NSFileManager defaultManager];    NSString *apfDocPath = [NSString stringWithFormat:@"这段路径不重要，隐藏", path];    if(![fileManager fileExistsAtPath:apfDocPath]){        return;    }    size_t count = 0;    classref_t *nlclslist = get_non_lazy_class_list(&count);    //最后一位指向的结构体中isa变量指向0x00000000的指针，故排除    for (int i = 0; i < count - 1; i++) {        Class cls = (Class)CFBridgingRelease(nlclslist[i]);        cls = object_getClass(cls);        swizzeLoadMethodInClass(cls, NO);    }    nlcategarylist = get_non_lazy_categary_list(&categaryCount);    for (int i = 0; i < categaryCount; i++) {        Class cls = (Class)CFBridgingRelease(nlcategarylist[i]->cls);        cls = object_getClass(cls);        swizzeLoadMethodInClass(cls, YES);    }}</code></pre><h4 id="其他要点"><a href="#其他要点" class="headerlink" title="其他要点"></a>其他要点</h4><p>值得注意的是：</p><h5 id="classref-t-类型"><a href="#classref-t-类型" class="headerlink" title="classref_t 类型"></a><code>classref_t</code> 类型</h5><p><code>get_non_lazy_class_list</code> 返回类型是 <code>classref_t</code> 。</p><p>由 <code>typedef struct classref * classref_t;</code> 得知：这个类型是 <code>struct classref *</code> 。那么 <code>struct classref</code> 是什么类型呢？在 Mach-O文件解析中，我们看到其类型是 <code>struct objc_class</code> 。所以： <code>struct classref</code> 的类型就是 <code>struct objc_class</code> 。</p><h5 id="category-t-类型"><a href="#category-t-类型" class="headerlink" title="category_t * 类型"></a><code>category_t *</code> 类型</h5><p>可以看到 <code>struct category_t</code> 的类型定义如下：</p><pre class=" language-objc"><code class="language-objc">struct category_t {    const char *name;    classref_t cls;    struct method_list_t *instanceMethods;    struct method_list_t *classMethods;    struct protocol_list_t *protocols;    struct property_list_t *instanceProperties;    // Fields below this point are not always present on disk.    struct property_list_t *_classProperties;    method_list_t *methodsForMeta(bool isMeta) {        if (isMeta) return classMethods;        else return instanceMethods;    }    property_list_t *propertiesForMeta(bool isMeta, struct header_info *hi);};</code></pre><p>这里，引入了  <code>struct method_list_t *</code> ,  <code>struct protocol_list_t *</code> 等，我们此次功能开发中不用的类型。所以在进行 <code>struct category_t</code> 类型引入的时候，做了个精简，能够通过编译即可。</p><pre class=" language-objc"><code class="language-objc">struct category_t {    const char *name;    classref_t cls;    void *instanceMethods;    void *classMethods;    void *protocols;    void *instanceProperties;    void *_classProperties;    void *methodsForMeta(bool isMeta) {        if (isMeta) return classMethods;        else return instanceMethods;    }    void *propertiesForMeta(bool isMeta, struct header_info *hi);};</code></pre><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>原本采用第三方的方案，做完一个中等大小 App 的 load 方法 hook 大概需要150 ms ，采用改进后的方案，可以控制在 10ms 以内。虽然这样的效果还达不到让人无感知的程度，所以在生产环境下，目前只是在开发者工具中进行选择启用。</p><p>这是最终效果图：</p><p><img src="/2018/06/14/loadtimecheck/phone_demo.png" alt="phone_demo"></p><h4 id="关于思路二的思考"><a href="#关于思路二的思考" class="headerlink" title="关于思路二的思考"></a>关于思路二的思考</h4><p>因为思路一的实现方案，虽然是比第三方的实现方案快了十倍以上，但是我觉得还没有到我很满意的程度。所以我这里也做了一些关于思路二可行性的思考，做一个简单的记录。</p><p>上文提到：在 objc 库中的 <code>objc-loadmethod.m</code> 文件找到 <code>call_class_loads</code> 方法，<code>call_class_loads</code>方法中有 <code>load_method_t load_method = (load_method_t)classes[i].method;</code> 这个 load_method ，就是 +load 方法的 IMP，如果可能拿到这个 IMP，并指向一个 HOOK 后的 IMP，在hook方法之中，调用源 IMP ，其实也是一个非常不错的方案。</p><p>那么有办法更加高效地拿到这个 IMP 吗？</p><p>我觉得可能有。</p><p>这个 IMP 在何时何处被赋值呢？</p><p>在执行 <code>prepare_load_methods</code> 时被赋值，在 <code>objc-loadmethod.m</code> 被调用。</p><pre class=" language-objc"><code class="language-objc">void add_class_to_loadable_list(Class cls){    IMP method;    loadMethodLock.assertLocked();    method = cls->getLoadMethod();    if (!method) return;  // Don't bother if cls has no +load method    if (PrintLoading) {        _objc_inform("LOAD: class '%s' scheduled for +load", cls->nameForLogging());    }    if (loadable_classes_used == loadable_classes_allocated) {        loadable_classes_allocated = loadable_classes_allocated*2 + 16;        loadable_classes = (struct loadable_class *)            realloc(loadable_classes, loadable_classes_allocated * sizeof(struct loadable_class));    }    loadable_classes[loadable_classes_used].cls = cls;    loadable_classes[loadable_classes_used].method = method;    loadable_classes_used++;}</code></pre><p>这个 <code>add_class_to_loadable_list</code> 方法比较长，想要完整地通过 fishhook （考虑不同系统和版本）进行替换，其实难度比较高。但是其中 <code>method = cls-&gt;getLoadMethod();</code> 这个过程其实是有一定机会的， <code>cls-&gt;getLoadMethod</code> 方法如下：</p><pre class=" language-objc"><code class="language-objc">IMP objc_class::getLoadMethod(){    runtimeLock.assertLocked();    const method_list_t *mlist;    assert(isRealized());    assert(ISA()->isRealized());    assert(!isMetaClass());    assert(ISA()->isMetaClass());    mlist = ISA()->data()->ro->baseMethods();    if (mlist) {        for (const auto& meth : *mlist) {            const char *name = sel_cname(meth.name);            if (0 == strcmp(name, "load")) {                return meth.imp;            }        }    }    return nil;}</code></pre><p>这个方法是有一定机会通过 fishhook 替换。难道包括且不只于以下几个方面：</p><ul><li>这是 C++ 的类方法，如果通过 fishhook ，我们需要知道其经过函数签名之后的方法名（这个可以通过包逆向做到），但是如何保证这个修饰后的名称不变且稳定是一个困难点。</li><li>通过 fishhook 的方案可行性、性能待论证。 </li></ul><h3 id="关于-iOS-load-机制的思考"><a href="#关于-iOS-load-机制的思考" class="headerlink" title="关于 iOS load 机制的思考"></a>关于 iOS load 机制的思考</h3><h4 id="为什么会有-load-机制"><a href="#为什么会有-load-机制" class="headerlink" title="为什么会有 load 机制"></a>为什么会有 load 机制</h4><p>从 objc 库静态解析结果和 Mach-O 文件分析结果来看。实现了 load 方法的类都是存在 <code>__objc_nlclslist</code>、<code>__objc_nlcatlist</code> 中。为什么要存在这里呢？其实这两个段只是非懒加载类的索引。在 App 启动前，加载的过程中需要执行 load 方法的类可以通过索引遍历出来，然后执行 load 方法，这是 iOS 刻意提供的一种机制，并非一个自然的加载过程中一个顺便的行为。</p><p>那么其他懒加载的类全数会在App启动的时候被加载吗？我虽然还没有对代码做一个更加深入的分析，但是有理由相信是：不会的。</p><p>为什么呢？因为从软件开发至今。内存从来都是昂贵且稀有的。App 绝大部分情况下会少占用内存、有效地利用内存。而且程序运行的时候是有局部性原理的。所以只有程序必须要用到、最常用到的部分才需要有效地驻留在内存内。</p><p>在软件开发的早期阶段，装载软件镜像主要通过覆盖载入，程序员需要手动管理代码段之间依赖关系。而现在采用的的是页映射的方式。所以那些懒加载的类应该是不会被加载进内存，只有发生缺页、断页的情况，才会加载对应的类、对应的代码段。</p><p>因为大部分的类都是懒加载的，而有些事情必须在 App 启动的时候做、在 main 方法之前做，所以才提供了 load 的机制。如果没有这种机制，那么所有的操作只能在 main 方法之后做。对于有些操作来说就太迟了。</p><h4 id="load-应该用来做什么事情"><a href="#load-应该用来做什么事情" class="headerlink" title="load 应该用来做什么事情"></a>load 应该用来做什么事情</h4><p>我曾见过有项目在 load 中初始化了用户信息，让其他业务模块能够尽早使用到用户信息，而用户信息中包含了头像 image ，头像从 <code>SDWebImage</code> 中获取。这么做 直接导致 <code>SDWebImage</code> 库初始化，在 SDWebImage 初始化的过程中还 create 了两条 queue 来处理数据。这么做直接导致了大量类的初始化树和初始化周期被改变。</p><p>还见过有项目在 load 中初始化了三个 <code>NSDateFormtter</code> ，要知道 <code>NSDateFormtter</code> 的初始化是非常耗时的， 而且这个 NSDateFormtter 并没有立刻用到（这是存心来找茬的吧）。 </p><p>以上两个都是反例。</p><p>那么load 应该用来做什么事情呢？</p><p>我觉得 method_swizzling 可以放在 load 中做，还有一些简单的数据统计、钩子相关的东西可以放在 load 中做，以求获取到更多的信息。</p><p>但是任何和业务相关的初始化都不应该放在load 中做。load 就是一个潘多拉魔盒， A 业务放在 load 中初始化了，那么 A 依赖的业务 也务必要放在 load 中初始化，这里无论是显式依赖导致的被动初始化，还是隐式依赖所导致的主动初始化。一旦打开了，就刹不住车了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iOS开发 — HHRouter路由数据传递开发分享</title>
      <link href="/2018/03/22/ios-hhrouter/"/>
      <url>/2018/03/22/ios-hhrouter/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在日常开发中，随着业务越来越复杂，代码中的耦合度将会大大增强，各模块间的相互调用将导致相互间的强依赖，我们可以通过使用<code>HHRouter</code>路由设计思路来减少代码的耦合度。</p><a id="more"></a><h1 id="一、传统控制器间的属性传递"><a href="#一、传统控制器间的属性传递" class="headerlink" title="一、传统控制器间的属性传递"></a>一、传统控制器间的属性传递</h1><p>在日常开发中经常碰到一些属性正向传递的问题，比如说<code>controllerA</code>页面 push 到<code>controllerB</code>页面，我们一般可以通过给控制器属性赋值以及初始化时将属性注入到控制器的方式进行数据的正向传递：</p><pre class=" language-objc"><code class="language-objc">//赋值UIViewController *controllerB = [[UIViewController alloc] init];controllerB.name = @"xiaoming";controllerB.userId = @"123456";[self.navigationController pushViewController:controllerB animated:YES];//初始化属性注入UIViewController *controllerB = [[UIViewController alloc] initWithName:@"xiaoming" userId:@"123456"];[self.navigationController pushViewController:controllerB animated:YES];</code></pre><p>若需要赋值的属性过多，这么操作将会变得很繁琐，代码也会过于冗余。同时注入的方式将使得两者间产生强依赖，<code>controllerA</code>若要跳转至<code>controllerB</code>，就必须要依赖<code>controllerB</code>，当随着业务的越来越复杂，将会产生错综复杂的依赖链，增加了代码耦合性。</p><h1 id="二、HHRouter实现机制与使用"><a href="#二、HHRouter实现机制与使用" class="headerlink" title="二、HHRouter实现机制与使用"></a>二、<code>HHRouter</code>实现机制与使用</h1><h2 id="2-1、控制器间的数据传递"><a href="#2-1、控制器间的数据传递" class="headerlink" title="2.1、控制器间的数据传递"></a>2.1、控制器间的数据传递</h2><p><code>HHRouter</code>是布丁动画开源的一个 router， URL Router 可以将控制器映射成唯一的 URL，其借鉴了 web 的开发思想，引入一个中介性质的 router，通过 router 完成 VC 间的数据传递。</p><p><code>HHRouter</code>为<code>ViewController</code>提供了两种方法：</p><pre class=" language-objc"><code class="language-objc">//将ViewController映射成对应的router- (void)map:(NSString *)route toControllerClass:(Class)controllerClass;//使用router匹配到对应的ViewController- (UIViewController *)matchController:(NSString *)route;</code></pre><p>使用<code>HHRouter</code>将 userId 传递给<code>TZLoginViewController</code>：</p><pre class=" language-objc"><code class="language-objc">[[HHRouter shared] map:@"/login/:userId/" toControllerClass:[TZLoginViewController class]];UIViewController *loginVC = [[HHRouter shared] matchController:@"/login/10009999/?a=6&b=7"];[self.navigationController pushViewController:loginVC animated:YES];</code></pre><p>代码中的<code>@&quot;/login/10009999/&quot;</code>作为路由的链接将<code>userId</code>、<code>a</code>、<code>b</code>的值传递给<code>TZLoginViewController</code>。<br>为了实现该机制，<code>HHRouter</code>会通过 <code>subRoutesToRoute</code> 函数将路由匹配成对应规则的字典：</p><pre class=" language-objc"><code class="language-objc">- (void)map:(NSString *)route toControllerClass:(Class)controllerClass {    NSMutableDictionary *subRoutes = [self subRoutesToRoute:route];    subRoutes[@"_"] = controllerClass;}- (NSMutableDictionary *)subRoutesToRoute:(NSString *)route {    NSArray *pathComponents = [self pathComponentsFromRoute:route];    NSInteger index = 0;    NSMutableDictionary *subRoutes = self.routes;   while (index < pathComponents.count) {        NSString *pathComponent = pathComponents[index];        if (![subRoutes objectForKey:pathComponent]) {            subRoutes[pathComponent] = [[NSMutableDictionary alloc] init];        }        subRoutes = subRoutes[pathComponent];        index++;    }    return subRoutes;}</code></pre><p>例如：</p><pre class=" language-objc"><code class="language-objc">[[HHRouter shared] map:@"/login/:userId/" toControllerClass:[TZLoginViewController class]];[[HHRouter shared] map:@"/register/:registerId/" toControllerClass:[TZRegisterViewController class]];[[HHRouter shared] map:@"/login/:userId/logout/?clearUserInfo = YES" toControllerClass:[TZLogoutViewController class]];</code></pre><p>将这三条路由匹配成对应的路由规则字典：</p><pre class=" language-objc"><code class="language-objc">@{      @"register" : @{              @":registerId" : @{                      @"_" : @"TZRegisterViewController"                      }              },      @"login" : @{              @":userId" : @{                      @"_" : @"TZLoginViewCOntroller",                      @"logout" : @{                              @"_" : @"TZLogoutViewController"                              }                      }              }}</code></pre><p>匹配完成后，当有一条路由过来时，首先<code>HHRouter</code>将匹配对应的 scheme（login），当 scheme 存在时，生成参数字典 params，并传递给<code>TZLoginViewController</code>实例：</p><pre class=" language-objc"><code class="language-objc">//通过router获取到对应的controllerUIViewController *loginVC = [[HHRouter shared] matchController:@"/login/920413/?autoLogin=YES&rememberPassword=YES"];//生成参数字典@{      @"controller_class" : @"TZLoginViewController",      @"router"           : @"/login/920413/",      @"userId"           : @"920413",      @"autoLogin"        : @(YES),      @"rememberPassword" : @(YES)}//获取路由匹配的ViewController - (UIViewController *)matchController:(NSString *)route {    NSDictionary *params = [self paramsInRoute:route];    Class controllerClass = params[@"controller_class"];    UIViewController *viewController = [[controllerClass alloc] init];    if ([viewController respondsToSelector:@selector(setParams:)]) {        [viewController performSelector:@selector(setParams:)                             withObject:[params copy]];    }    return viewController;}</code></pre><p><code>TZLoginViewController</code>中相应的参数都被绑定在 params 属性的字典里：</p><pre class=" language-objc"><code class="language-objc">- (void)setParams:(NSDictionary *)params {    _params = params;    NSLog(@"Params: %@", params);}</code></pre><p>使用HHRouter大大减小了<code>UIVIewController</code>之间的相互依赖，若<code>ViewController</code>属性不断变化，我们只需要在<code>ViewController</code>中修改使用到的属性即可，它的各项参数均可通过 URL Router 的参数完成传递，大大降低了两者间的耦合度。</p><h2 id="2-2-block-数据传递"><a href="#2-2-block-数据传递" class="headerlink" title="2.2 block 数据传递"></a>2.2 block 数据传递</h2><p><code>HHRouter</code>还提供了 block 传值方式，其主要包含了三个方法：</p><pre class=" language-objc"><code class="language-objc">//设置路由规则- (void)map:(NSString *)route toBlock:(HHRouterBlock)block;//匹配路由规则- (id)callBlock:(NSString *)route;- (HHRouterBlock)matchBlock:(NSString *)route;</code></pre><p>其中，map 用于设置路由规则，<code>matchBlock</code>用于匹配路由规则，找到指定的 block，但是不会主动调用该 block，需要在后面手动调用。<code>callBlock</code>方法在找到指定的 block 后，立即调用。</p><p>设置路由规则，映射成对应的 URL：</p><pre class=" language-objc"><code class="language-objc">[[HHRouter shared] map:@"/user/add/" toBlock:^id(NSDictionary *params) {        NSLog(@"b = %@", [params objectForKey:@"b"]);        return nil;}];</code></pre><p>这条规则对应的会生成一个路由规则的字典：</p><pre class=" language-objc"><code class="language-objc">@{      @"user" : @{              @": add" : @{                      @"_" = "<__NSGlobalBlock__: 0x108edf138>"                      }              },}</code></pre><p>在对应触发事件处，匹配路由:</p><pre class=" language-objc"><code class="language-objc">[[HHRouter shared] callBlock:@"/user/add/?b=20"];</code></pre><p>匹配出的路由参数字典：</p><pre class=" language-objc"><code class="language-objc">@{      @"block"      :   @"<__NSGlobalBlock__: 0x108edf138>",      @"router"     :   @"/user/add/?b=20",      @"b"          :   @"20", }</code></pre><p>这样匹配的参数就可以通过 block 进行回调了。</p><h2 id="2-3-工厂goPage方法解析"><a href="#2-3-工厂goPage方法解析" class="headerlink" title="2.3 工厂goPage方法解析"></a>2.3 工厂<code>goPage</code>方法解析</h2><p>我们平常的项目开放中，在做组件间的跳转时总是会用到工厂的<code>goPage</code>方法，工厂<code>goPage</code>方法其实也是类似这种使用路由的方式获取相对应的控制器进行 push：</p><pre class=" language-objc"><code class="language-objc">NSString *url = @"cmp://com.nd.sdp.component.transaction-flow/transaction_main_page";</code></pre><p>其中<code>cmp://</code>作为匹配的 scheme，只有当 scheme 匹配成功了才会继续进行匹配，<code>com.nd.sdp.component.transaction-flow/transaction_main_page</code>是组件页面的唯一路由地址，通过<code>getPage</code>方法获取到对应的<code>APFPageWrapper</code>实例，其包含了目的控制器以及相关的参数字典,通过<code>getController</code>和<code>getParam</code>来获取：</p><pre class=" language-objc"><code class="language-objc">APFPageWrapper *pageWrapper = [self getPage:uri];//获取URL匹配到的控制器UIViewController *webViewController = [pageWrapper getController];//获取URL匹配到的参数NSString *strTitle = [[pageWrapper getParam] objectForKey: @"title"] ? : @"";//获取源控制器UIViewController *sourceViewController = context[KEY_CMP_SRC_CONTROLLER];[sourceViewController.navigationController pushViewController:webViewController animated:YES];</code></pre><h1 id="三、小结"><a href="#三、小结" class="headerlink" title="三、小结"></a>三、小结</h1><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><p>通过<code>HHrouter</code>将<code>UIViewController</code>映射成 URL，从而支持页面像 web 那样通过URL进行页面跳转，首先这能够极大的减小<code>UIViewController</code>之间的耦合度，其次当每个界面都拥有唯一且不重复的 URL，将带来额外的好处。譬如你将更容易实现 Push 打开指定的界面、追踪用户浏览记录等需求。</p><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ul><li>这种基于<code>URL Router</code>方案只能传递常规对象，无法传递自定义对象。<br></li><li>URL 的 map 规则是需要注册的，它们一般会在<code>load</code>方法里面写。这样会影响 App 启动速度的。<br></li><li>URL 链接里面关于组件和页面的名字都是硬编码，参数也都是硬编码。而且每个 URL 参数字段都必须要一个文档进行维护，这将对业务开发人员造成负担。</li></ul><h3 id="该库为使用分享，并非建议大家在项目中再次引入"><a href="#该库为使用分享，并非建议大家在项目中再次引入" class="headerlink" title="该库为使用分享，并非建议大家在项目中再次引入."></a>该库为使用分享，并非建议大家在项目中再次引入.</h3><h3 id="使用到的第三方库："><a href="#使用到的第三方库：" class="headerlink" title="使用到的第三方库："></a>使用到的第三方库：</h3><h4 id="HHRouter：https-github-com-Huohua-HHRouter"><a href="#HHRouter：https-github-com-Huohua-HHRouter" class="headerlink" title="HHRouter：https://github.com/Huohua/HHRouter"></a><code>HHRouter</code>：<a href="https://github.com/Huohua/HHRouter" target="_blank" rel="noopener">https://github.com/Huohua/HHRouter</a></h4><h4 id="CocoaPods：pod-‘HHRouter’-‘-gt-0-1-8’："><a href="#CocoaPods：pod-‘HHRouter’-‘-gt-0-1-8’：" class="headerlink" title="CocoaPods：pod ‘HHRouter’, ‘~&gt; 0.1.8’："></a>CocoaPods：pod ‘HHRouter’, ‘~&gt; 0.1.8’：</h4><p>参考链接：</p><p><a href="https://github.com/Huohua/HHRouter#cocoapods" target="_blank" rel="noopener">https://github.com/Huohua/HHRouter#cocoapods</a></p><p><a href="http://www.cocoachina.com/ios/20170301/18811.html" target="_blank" rel="noopener">http://www.cocoachina.com/ios/20170301/18811.html</a></p><p><a href="https://segmentfault.com/a/1190000002585537" target="_blank" rel="noopener">https://segmentfault.com/a/1190000002585537</a></p>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HHRouter </tag>
            
            <tag> 控制器间传值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS开发 — 自定义可交互的 UITextView</title>
      <link href="/2017/11/29/ios-interactivetextview/"/>
      <url>/2017/11/29/ios-interactivetextview/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><p>最近有个项目需要做一个可以对 <code>UITextView</code> 内容进行交互的功能，因此做了一个类似新浪微博，可以展示 <code>Emoji</code> 、<code>@somebody</code> 、<code>#话题#</code> 以及<code>链接</code>的 Demo 。实现点击特殊字段的文字，并得到一个相应的响应。</p><a id="more"></a><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/2017/11/29/ios-interactivetextview/show.gif" alt></p><h1 id="一、Demo-结构"><a href="#一、Demo-结构" class="headerlink" title="一、Demo 结构"></a>一、Demo 结构</h1><p>通过创建自定义的 <code>TZStatusTextView</code> 展示带有属性的特殊字段内容：如<code>链接</code>、<code>Emoji</code>、<code>话题</code>以及 <code>@somebody</code> 等等。</p><p>1、自定义 <code>UITextView (TZStatusTextView)</code></p><p>2、model: <code>TZSpecialPart（特殊字段）</code>、<code>TZStatus（正文内容）</code>、 <code>TZTextPart（字段内容）</code></p><p>3、tool（Emoji工具）: <code>TZEmojiTool</code>、<code>TZEmoji</code></p><h1 id="二、主要代码解读"><a href="#二、主要代码解读" class="headerlink" title="二、主要代码解读"></a>二、主要代码解读</h1><p>Demo 中展示的内容(截取一段微博正文):<br><code>@StephenCurry  &quot;I&#39;m Back&quot;！ https://bbs.hupu.com （使用#秒拍#录制，免流量看热门短视频！） #库里经典比# 去年季后赛次轮，伤愈复出的库里首战面对开拓者就拿下40分9篮板8助攻，加时赛疯砍17分，率队逆转获胜晋级西决。#StreeBall#  [吃元宵][吃元宵][吃元宵]。</code></p><h2 id="2-1-实例化展示内容"><a href="#2-1-实例化展示内容" class="headerlink" title="2.1 实例化展示内容"></a>2.1 实例化展示内容</h2><pre class=" language-objc"><code class="language-objc">// TZStatus.h/** 正文内容 */@property (copy, nonatomic) NSString *contentText;/** 带属性的微博信息内容 */@property (strong, nonatomic) NSAttributedString *attributedText;// TZTextPart.h/** 文字段内容 */@property (strong, nonatomic) NSString *partText;/** 文字段范围 */@property (assign, nonatomic) NSRange range;/** 是否是特殊文字 */@property (assign, nonatomic, getter=isSpecial) BOOL special;/** 是否是表情文字 */@property (assign, nonatomic, getter=isEmoji) BOOL emoji;// TZSpecialPart.h/** 特殊段内容 */@property (strong, nonatomic) NSString *specialText;/** 特殊段范围 */@property (assign, nonatomic) NSRange specialRange;/** 特殊文字的矩形框 数组 */@property (strong, nonatomic) NSArray *rects;</code></pre><p>通过正则表达将 <code>NSString</code> 中的 <code>emoji</code>、<code>@somebody</code>、<code>#话题#</code>、<code>链接</code>、<code>普通字段</code> 区分开，并拼接成 <code>NSAttributedString</code>:</p><pre class=" language-objc"><code class="language-objc">- (NSAttributedString *)attributedTextWithText:(NSString *)contentText {//    利用tex生成attributedText    NSMutableAttributedString *attributedText = [[NSMutableAttributedString alloc] init];//    1.RegexKitLite正则表达方法//     表情的规则    NSString *emojiPattern = @"\\[[0-9a-zA-Z\\u4e00-\\u9fa5]+\\]";//     @的规则    NSString *atPattern = @"@[0-9a-zA-Z\\u4e00-\\u9fa5_-]+";//     #话题#的规则    NSString *topicPattern = @"#[0-9a-zA-Z\\u4e00-\\u9fa5]+#";//     url链接的规则    NSString *urlPattern = @"\\b(([\\w-]+://?|www[.])[^\\s()<>]+(?:\\([\\w\\d]+\\)|([^[:punct:]\\s]|/)))";    NSString *pattern = [NSString stringWithFormat:@"%@|%@|%@|%@", emojiPattern, atPattern, topicPattern, urlPattern];//    各种文字段的内容    NSMutableArray *parts = [NSMutableArray array];//    2.遍历所有内容 选出特殊字段内容    [contentText enumerateStringsMatchedByRegex:pattern usingBlock:^(NSInteger captureCount, NSString *const __unsafe_unretained *capturedStrings, const NSRange *capturedRanges, volatile BOOL *const stop) {//        没有匹配的字段        if ((*capturedRanges).length == 0) return;//        收集特殊字段        TZTextPart *part = [[TZTextPart alloc] init];        part.partText = *capturedStrings;        part.range = *capturedRanges;        part.special = YES;        part.emoji = [part.partText hasPrefix:@"["] && [part.partText hasSuffix:@"]"];        [parts addObject:part];    }];//     3.遍历所有内容 选出普通字段内容    [contentText enumerateStringsSeparatedByRegex:pattern usingBlock:^(NSInteger captureCount, NSString *const __unsafe_unretained *capturedStrings, const NSRange *capturedRanges, volatile BOOL *const stop) {        //        没有匹配的字段        if ((*capturedRanges).length == 0) return;        //        收集普通字段        TZTextPart *part = [[TZTextPart alloc] init];        part.partText = *capturedStrings;        part.range = *capturedRanges;        [parts addObject:part];    }];//     4.将获得的所有字段按 range 排序    [parts sortUsingComparator:^NSComparisonResult(TZTextPart  *_Nonnull part1, TZTextPart *_Nonnull part2) {//升序排列        if (part1.range.location > part2.range.location) {            return NSOrderedDescending;        }        return NSOrderedAscending;    }];     UIFont *font = [UIFont systemFontOfSize:15.0];//      储存特殊属性数组    NSMutableArray *specials = [NSMutableArray array];//     5.分别处理各文字段 设置内容的属性    for (TZTextPart *part in parts) {        NSAttributedString *substr = nil;        if (part.isEmoji) {//表情            NSTextAttachment *attch = [[NSTextAttachment alloc] init];            NSString *name = [TZEmojiTool emojiWithChs:part.partText].png;            if (name) { // 能找到对应的图片                attch.image = [UIImage imageNamed:name];                attch.bounds = CGRectMake(0, -3, font.lineHeight, font.lineHeight);                substr = [NSAttributedString attributedStringWithAttachment:attch];            } else { // 表情图片不存在                substr = [[NSAttributedString alloc] initWithString:part.partText];            }        }else if (part.special){//特殊文字            substr = [[NSAttributedString alloc] initWithString:part.partText attributes:@{                                                                                           NSForegroundColorAttributeName:[UIColor blueColor]                                                                                           }];//            将特殊文字段的 内容 和 位置 保存起来            TZSpecialPart *specialPart = [[TZSpecialPart alloc] init];            specialPart.specialText = part.partText;            NSUInteger loc = part.range.location;            NSUInteger len = part.range.length;            specialPart.specialRange = NSMakeRange(loc, len);            [specials addObject:specialPart];        } else {//非特殊文字            substr = [[NSAttributedString alloc] initWithString:part.partText];        }        [attributedText appendAttributedString:substr];    }    [attributedText addAttribute:NSFontAttributeName value:font range:NSMakeRange(0, attributedText.length)];//    把specials 添加到  0，1 的位置上（第一个字符的属性上）    [attributedText addAttribute:@"specials" value:specials range:NSMakeRange(0, 1)];    return attributedText;}</code></pre><p>此时已经将正文中的特殊字段 <code>(@、##、链接、emoji)</code> 分别截取出来，并保存在 <code>attributedText</code> 的 <code>special</code> 属性中。我们将 <code>tatus</code> 实例中的 <code>attributedText</code> 赋值给 <code>TZTextView</code>。</p><h2 id="2-2-在-TZTextView-中创建特殊字段矩形框"><a href="#2-2-在-TZTextView-中创建特殊字段矩形框" class="headerlink" title="2.2 在 TZTextView 中创建特殊字段矩形框"></a>2.2 在 <code>TZTextView</code> 中创建特殊字段矩形框</h2><p>为了实现点击特殊字段响应事件，我们需要创建出特殊字段所在的所有矩形框。（当触摸点位于在这些矩形框上，我们就可以将特殊字段高亮处理，实现点击事件）。</p><h3 id="注意-这里需要获取的是矩形框数组，因为特殊字段可能会分行显示，我们需要对分行的两部分都实现相同的点击事件！！！"><a href="#注意-这里需要获取的是矩形框数组，因为特殊字段可能会分行显示，我们需要对分行的两部分都实现相同的点击事件！！！" class="headerlink" title="注意:这里需要获取的是矩形框数组，因为特殊字段可能会分行显示，我们需要对分行的两部分都实现相同的点击事件！！！"></a>注意:这里需要获取的是矩形框数组，因为特殊字段可能会分行显示，我们需要对分行的两部分都实现相同的点击事件！！！</h3><pre class=" language-objc"><code class="language-objc">/** *  初始化特殊字段的矩形框 */- (void)setupSpecialRects {//    取出位于attributedText 中 （0，1）位置上的 specials    NSArray *specials = [self.attributedText attribute:@"specials" atIndex:0 effectiveRange:nil];    for (TZSpecialPart *specialPart in specials) {//        将特殊文字范围 赋值 给选中范围        self.selectedRange = specialPart.specialRange;//        selectedRange => 影响 selectedTextRange 通过selectedTextRange 获取特殊文字所在的矩形框        NSArray *Rects = [self selectionRectsForRange:self.selectedTextRange];//         取消选中文字        self.selectedRange = NSMakeRange(0, 0);//        得到特殊部分矩形框        NSMutableArray *rects = [NSMutableArray array];        for (UITextSelectionRect *selectionRect in Rects) {            CGRect selectedRect = selectionRect.rect;            if (selectedRect.size.width == 0 || selectedRect.size.height == 0) continue;            [rects addObject:[NSValue valueWithCGRect:selectedRect]];        }        specialPart.rects = rects;    }}</code></pre><h2 id="2-3-在-TZTextView-中实现点击事件"><a href="#2-3-在-TZTextView-中实现点击事件" class="headerlink" title="2.3 在 TZTextView 中实现点击事件"></a>2.3 在 <code>TZTextView</code> 中实现点击事件</h2><pre class=" language-objc"><code class="language-objc">/** *  找出被触摸的特殊字符串 */- (TZSpecialPart *)touchingSpecialWithPoint:(CGPoint)point {    NSArray *specials = [self.attributedText attribute:@"specials" atIndex:0 effectiveRange:nil];    for (TZSpecialPart *specialPart in specials) {        for (NSValue *rectValue in specialPart.rects) {//            如果手指位置在 特定文字 位置            if (CGRectContainsPoint(rectValue.CGRectValue,point)) {                return specialPart;            }        }    }    return nil;}- (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {//    1.获取触摸位置    UITouch *touch = [touches anyObject];    CGPoint point = [touch locationInView:self];//    2.初始化特殊文字段的矩形框    [self setupSpecialRects];//    3.根据触摸点获得被触摸的特殊字符串    TZSpecialPart *specialPart = [self touchingSpecialWithPoint:point];//    4.在被触摸的特殊字符串后面显示一段高亮的背景    for (NSValue *rectValue in specialPart.rects) {//      添加遮盖        UIView *cover = [[UIView alloc] init];        cover.backgroundColor = [UIColor greenColor];        cover.frame = rectValue.CGRectValue;        cover.tag = TZCoverTag;        [self insertSubview:cover atIndex:0];    }//   添加block执行响应事件    if (self.getSpecialtext) {        self.getSpecialtext(specialPart.specialText);    }}</code></pre><h1 id="三、小结"><a href="#三、小结" class="headerlink" title="三、小结"></a>三、小结</h1><p>使用到的第三方库：</p><h4 id="RegexKitLite-SDP：git-git-sdp-nd-cocoapods-regexkitlite-sdp-git"><a href="#RegexKitLite-SDP：git-git-sdp-nd-cocoapods-regexkitlite-sdp-git" class="headerlink" title="RegexKitLite-SDP：git@git.sdp.nd:cocoapods/regexkitlite-sdp.git"></a><code>RegexKitLite-SDP</code>：<a href="git@git.sdp.nd:cocoapods/regexkitlite-sdp.git">git@git.sdp.nd:cocoapods/regexkitlite-sdp.git</a></h4><h5 id="使用注意：RegexKitLite-正则表达，使用起来是非常方便，但由于是-MAC-模式，在使用的时候，需要进行以下操作："><a href="#使用注意：RegexKitLite-正则表达，使用起来是非常方便，但由于是-MAC-模式，在使用的时候，需要进行以下操作：" class="headerlink" title="使用注意：RegexKitLite 正则表达，使用起来是非常方便，但由于是 MAC 模式，在使用的时候，需要进行以下操作："></a>使用注意：<code>RegexKitLite</code> 正则表达，使用起来是非常方便，但由于是 MAC 模式，在使用的时候，需要进行以下操作：</h5><p>1.使用 <code>-fno-objc-arc</code> 让 <code>RegexKitLite</code> 支持 ARC<br><img src="/2017/11/29/ios-interactivetextview/setArc.png" alt></p><p>2.导入 <code>libicucore.tbd</code> 动态库<br><img src="/2017/11/29/ios-interactivetextview/lib.png" alt></p><p>参考链接：</p><p><a href="http://www.cnblogs.com/jys509/p/5536645.html" target="_blank" rel="noopener">http://www.cnblogs.com/jys509/p/5536645.html</a></p><p><a href="http://blog.csdn.net/loser_loser1/article/details/59108876" target="_blank" rel="noopener">http://blog.csdn.net/loser_loser1/article/details/59108876</a></p><p><a href="http://www.cnblogs.com/li-Xu/p/5742537.html" target="_blank" rel="noopener">http://www.cnblogs.com/li-Xu/p/5742537.html</a></p><p>源码和 demo 请点<a href="https://github.com/ZouMac/TZStatusTextView.git" target="_blank" rel="noopener">这里</a></p>]]></content>
      
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UITextView </tag>
            
            <tag> 图文混排 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
